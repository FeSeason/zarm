(self.webpackChunksite=self.webpackChunksite||[]).push([[9117],{49163:function(n,e,t){"use strict";t.r(e),e.default="# Modal 模态框\n\n## 基本用法\n\n```jsx\nimport { useRef, useReducer } from 'react';\nimport { Modal, Cell, Button, Select } from 'zarm';\n\nconst initState = {\n  normal: {\n    visible: false,\n  },\n  hasFooter: {\n    visible: false,\n  },\n  closable: {\n    visible: false,\n  },\n  onlyBody: {\n    visible: false,\n  },\n  animation: {\n    visible: false,\n    animationType: 'fade',\n  },\n  customContainer: {\n    visible: false,\n  },\n};\n\nconst reducer = (state, action) => {\n  const { type, key, animationType } = action;\n\n  switch (type) {\n    case 'visible':\n      return {\n        ...state,\n        [key]: {\n          ...state[key],\n          visible: !state[key].visible,\n        },\n      };\n\n    case 'animation':\n      return {\n        ...state,\n        [key]: {\n          ...state[key],\n          animationType,\n        },\n      };\n\n    default:\n  }\n};\n\nconst Demo = () => {\n  const myRef = useRef();\n  const [state, dispatch] = useReducer(reducer, initState);\n\n  const toggle = (key) => dispatch({ type: 'visible', key });\n\n  return (\n    <>\n      <Cell\n        description={\n          <Button size=\"xs\" onClick={() => toggle('normal')}>\n            开启\n          </Button>\n        }\n      >\n        普通\n      </Cell>\n\n      <Cell\n        description={\n          <Button size=\"xs\" onClick={() => toggle('hasFooter')}>\n            开启\n          </Button>\n        }\n      >\n        有底部按钮\n      </Cell>\n\n      <Cell\n        description={\n          <Button size=\"xs\" onClick={() => toggle('closable')}>\n            开启\n          </Button>\n        }\n      >\n        遮罩层可关闭\n      </Cell>\n\n      <Cell\n        description={\n          <Button size=\"xs\" onClick={() => toggle('onlyBody')}>\n            开启\n          </Button>\n        }\n      >\n        无头部，无底部\n      </Cell>\n\n      <Cell\n        title=\"动画效果\"\n        description={\n          <Button size=\"xs\" onClick={() => toggle('animation')}>\n            开启\n          </Button>\n        }\n      >\n        <Select\n          value={state.animation.animationType}\n          dataSource={[\n            { value: 'fade', label: '淡出淡入效果(fade)' },\n            { value: 'zoom', label: '缩放效果(zoom)' },\n            { value: 'rotate', label: '旋转效果(rotate)' },\n            { value: 'door', label: '开关门效果(door)' },\n            { value: 'flip', label: '翻转效果(flip)' },\n            { value: 'moveUp', label: '移出移入效果(moveUp)' },\n            { value: 'moveDown', label: '移出移入效果(moveDown)' },\n            { value: 'moveLeft', label: '移出移入效果(moveLeft)' },\n            { value: 'moveRight', label: '移出移入效果(moveRight)' },\n            { value: 'slideUp', label: '滑出滑入效果(slideUp)' },\n            { value: 'slideDown', label: '滑出滑入效果(slideDown)' },\n            { value: 'slideLeft', label: '滑出滑入效果(slideLeft)' },\n            { value: 'slideRight', label: '滑出滑入效果(slideRight)' },\n          ]}\n          onOk={(selected) => {\n            dispatch({\n              type: 'animation',\n              key: 'animation',\n              animationType: selected.map((item) => item.value),\n            });\n          }}\n        />\n      </Cell>\n\n      <Cell\n        description={\n          <Button size=\"xs\" onClick={() => toggle('customContainer')}>\n            开启\n          </Button>\n        }\n      >\n        挂载到指定dom节点\n      </Cell>\n\n      <div id=\"test-div\" style={{ position: 'relative', zIndex: 1 }} ref={myRef} />\n\n      <Modal visible={state.normal.visible} title=\"标题\" closable onCancel={() => toggle('normal')}>\n        模态框内容\n      </Modal>\n\n      <Modal\n        title=\"标题\"\n        visible={state.hasFooter.visible}\n        footer={\n          <Button block theme=\"primary\" onClick={() => toggle('hasFooter')}>\n            确认\n          </Button>\n        }\n      >\n        <p>模态框内容</p>\n      </Modal>\n\n      <Modal\n        visible={state.closable.visible}\n        title=\"标题\"\n        maskClosable\n        onCancel={() => toggle('closable')}\n      >\n        点击遮罩层关闭\n      </Modal>\n\n      <Modal visible={state.onlyBody.visible} maskClosable onCancel={() => toggle('onlyBody')}>\n        无头部，无底部\n      </Modal>\n\n      <Modal\n        visible={state.animation.visible}\n        animationType={state.animation.animationType}\n        maskClosable\n        onCancel={() => toggle('animation')}\n      >\n        <div style={{ height: 100 }}>\n          当前使用的动画类型animationType：'{state.animation.animationType}'\n        </div>\n      </Modal>\n\n      <Modal\n        visible={state.customContainer.visible}\n        maskClosable\n        onCancel={() => toggle('customContainer')}\n        mountContainer={() => myRef.current}\n      >\n        挂载到指定dom节点\n      </Modal>\n    </>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## 警告框 Alert\n\n```jsx\nimport { Cell, Button, Modal } from 'zarm';\n\nconst Demo = () => {\n  return (\n    <>\n      <Cell\n        description={\n          <Button\n            size=\"xs\"\n            onClick={() => {\n              const modal = Modal.alert({\n                className: 'test',\n                title: '静态调用的title',\n                content: '静态调用的body',\n                onCancel: () => {\n                  modal.hide();\n                },\n              });\n            }}\n          >\n            开启\n          </Button>\n        }\n      >\n        静态调用（静态关闭）\n      </Cell>\n\n      <Cell\n        description={\n          <Button\n            size=\"xs\"\n            onClick={() => {\n              const modal = Modal.alert({\n                title: '静态调用的title',\n                content: '静态调用的body，使用promise关闭',\n                onCancel: () => {\n                  return new Promise((resolve, reject) => {\n                    resolve();\n                    // setTimeout(Math.random() > 0.5 ? resolve : reject, 500);\n                  }).catch(() => {\n                    window.alert('出错啦，弹窗无法关闭，继续点击试试');\n                    return false; // 返回false，可使弹窗无法关闭\n                  });\n                },\n              });\n            }}\n          >\n            开启\n          </Button>\n        }\n      >\n        静态调用（使用promise关闭）\n      </Cell>\n    </>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## 确认框 Confirm\n\n```jsx\nimport { Cell, Button, Modal } from 'zarm';\n\nconst Demo = () => {\n  return (\n    <>\n      <Cell\n        description={\n          <Button\n            size=\"xs\"\n            onClick={() => {\n              const modal = Modal.confirm({\n                title: '确认信息',\n                content: '静态调用的body',\n                onCancel: () => {\n                  console.log('点击cancel');\n                },\n                onOk: () => {\n                  console.log('点击ok');\n                },\n              });\n            }}\n          >\n            开启\n          </Button>\n        }\n      >\n        静态调用（静态关闭）\n      </Cell>\n\n      <Cell\n        description={\n          <Button\n            size=\"xs\"\n            onClick={() => {\n              const modal = Modal.confirm({\n                title: '静态调用的title',\n                content: '静态调用的body，使用promise关闭',\n                onCancel: () => {\n                  return new Promise((resolve, reject) => {\n                    resolve();\n                    // setTimeout(Math.random() > 0.5 ? resolve : reject, 500);\n                  }).catch(() => {\n                    window.alert('出错啦，弹窗无法关闭，继续点击试试');\n                    return false; // 返回false，可使弹窗无法关闭\n                  });\n                },\n              });\n            }}\n          >\n            开启\n          </Button>\n        }\n      >\n        静态调用（使用promise关闭）\n      </Cell>\n    </>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## API\n\n| 属性              | 类型                                 | 默认值        | 说明                                                                                                                                                      |\n| :---------------- | :----------------------------------- | :------------ | :-------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| shape             | string                               | 'radius'      | 形状，可选值 `rect`、`radius`                                                                                                                             |\n| visible           | boolean                              | false         | 是否显示                                                                                                                                                  |\n| animationType     | string                               | 'fade'        | 动画效果，可选值 `fade`, `door`, `flip`, `rotate`, `zoom`,`moveUp`, `moveDown`, `moveLeft`, `moveRight`,`slideUp`, `slideDown`, `slideLeft`, `slideRight` |\n| animationDuration | number                               | 200           | 动画执行时间（单位：毫秒）                                                                                                                                |\n| width             | string &#124; number                 | '70%'         | 宽度                                                                                                                                                      |\n| mask              | boolean                              | true          | 是否展示遮罩层                                                                                                                                            |\n| maskType          | string                               | 'normal'      | 遮罩层的类型，可选值 `transparent`, `normal`                                                                                                              |\n| maskClosable      | boolean                              | false         | 是否点击遮罩层时关闭，需要和 onCancel 一起使用                                                                                                            |\n| closable          | boolean                              | false         | 右上角是否显示关闭按钮，需要和 onCancel 一起使用                                                                                                          |\n| onCancel          | () => void                           | -             | 如果 maskClosable 或 closable 为 true，那么点击遮罩或者右上角关闭按钮会调用此函数                                                                         |\n| title             | ReactNode                            | -             | 标题                                                                                                                                                      |\n| footer            | ReactNode                            | -             | 弹窗底部内容                                                                                                                                              |\n| destroy           | boolean                              | true          | 弹层关闭后是否移除节点                                                                                                                                    |\n| afterOpen         | () => void                           | -             | 模态框打开后的回调                                                                                                                                        |\n| afterClose        | () => void                           | -             | 模态框关闭后的回调                                                                                                                                        |\n| mountContainer    | HTMLElement &#124; () => HTMLElement | document.body | 指定 Modal 挂载的 HTML 节点                                                                                                                               |\n\n## 静态方法\n\n```js\n// 显示警告框，不传onCancel也可关闭，如需做更多操作，参考下方confirm的例子\nconst alert = Modal.alert({\n  title: '静态调用的title',\n  content: '静态调用的body',\n});\n\n// 显示确认框，若关闭时需要promise，onOk、onCancel均支持promise\nconst confirm = Modal.confirm({\n  title: '静态调用的title',\n  content: '静态调用的body，使用promise关闭',\n  onOk: () => {\n    return fetch.get('xxx.api').then((res) => {\n      if(res.code === 0) {\n        return true; // 关闭弹窗\n      } else {\n        return false; // 阻止弹窗关闭\n      }\n    }).catch(...);\n  }\n});\n\n```\n\n| 属性       | 类型       | 默认值                        | 说明                            |\n| :--------- | :--------- | :---------------------------- | :------------------------------ |\n| title      | ReactNode  | -                             | 弹出框的标题                    |\n| content    | ReactNode  | -                             | 弹出框的内容                    |\n| cancelText | ReactNode  | '关闭'(Alert)/'取消'(Confirm) | 取消按钮的内容                  |\n| okText     | ReactNode  | '确认'                        | 确认按钮的内容                  |\n| onOk       | () => void | -                             | 点击“确认”后的回调函数(Confirm) |\n| onCancel   | () => void | -                             | 点击“关闭/取消”后的回调函数     |\n"}}]);