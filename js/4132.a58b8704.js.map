{"version":3,"file":"js/4132.a58b8704.js","mappings":"0GAAA,2jV","sources":["webpack://site/../zarm/src/cascader/demo.md"],"sourcesContent":["export default \"# Cascader 级联选择器\\n\\n## 基本用法\\n\\n```jsx\\nimport { useState } from 'react';\\nimport { Cascader, List, Button } from 'zarm';\\n\\nconst Demo = () => {\\n  const [visible, setVisible] = useState(false);\\n  const [value, setValue] = useState([]);\\n\\n  const District = [\\n    {\\n      value: '340000',\\n      label: '安徽省',\\n      children: [\\n        {\\n          value: '340800',\\n          label: '安庆市',\\n          children: [\\n            {\\n              value: '340803',\\n              label: '大观区',\\n              children: [],\\n            },\\n            {\\n              value: '340822',\\n              label: '怀宁县',\\n              children: [],\\n            },\\n            {\\n              value: '340882',\\n              label: '其它区',\\n              children: [],\\n            },\\n          ],\\n        },\\n      ],\\n    },\\n    {\\n      value: '310000',\\n      label: '上海',\\n      children: [\\n        {\\n          value: '310100',\\n          label: '上海市',\\n          children: [\\n            {\\n              value: '310113',\\n              label: '宝山区',\\n              children: [],\\n            },\\n            {\\n              value: '310105',\\n              label: '长宁区',\\n              children: [],\\n            },\\n            {\\n              value: '310230',\\n              label: '崇明县',\\n              children: [],\\n            },\\n            {\\n              value: '310152',\\n              label: '川沙区',\\n              children: [],\\n            },\\n          ],\\n        },\\n      ],\\n    },\\n  ];\\n\\n  return (\\n    <>\\n      <List>\\n        <List.Item\\n          title=\\\"普通\\\"\\n          suffix={\\n            <Button size=\\\"xs\\\" onClick={() => setVisible(true)}>\\n              选择\\n            </Button>\\n          }\\n        >\\n          {value.join(',')}\\n        </List.Item>\\n      </List>\\n\\n      <Cascader\\n        maskClosable\\n        visible={visible}\\n        value={value}\\n        title=\\\"级联选择器\\\"\\n        dataSource={District}\\n        onChange={(value, items) => {\\n          console.log('onChange', value, items);\\n        }}\\n        onConfirm={(value, items) => {\\n          console.log('onConfirm', value, items);\\n          setValue(value);\\n          setVisible(false);\\n        }}\\n        onCancel={() => {\\n          console.log('onCancel');\\n          setVisible(false);\\n        }}\\n      />\\n    </>\\n  );\\n};\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n## 指令式\\n\\n```jsx\\nimport { useState, useEffect } from 'react';\\nimport { List, Cascader, Button, Toast } from 'zarm';\\n\\nconst PROMPT_DATA = [\\n  {\\n    value: '340000',\\n    label: '安徽省',\\n    children: [\\n      {\\n        value: '340800',\\n        label: '安庆市',\\n        children: [\\n          {\\n            value: '340803',\\n            label: '大观区',\\n            children: [],\\n          },\\n          {\\n            value: '340822',\\n            label: '怀宁县',\\n            children: [],\\n          },\\n          {\\n            value: '340882',\\n            label: '其它区',\\n            children: [],\\n          },\\n        ],\\n      },\\n    ],\\n  },\\n  {\\n    value: '310000',\\n    label: '上海',\\n    children: [\\n      {\\n        value: '310100',\\n        label: '上海市',\\n        children: [\\n          {\\n            value: '310113',\\n            label: '宝山区',\\n            children: [],\\n          },\\n          {\\n            value: '310105',\\n            label: '长宁区',\\n            children: [],\\n          },\\n          {\\n            value: '310230',\\n            label: '崇明县',\\n            children: [],\\n          },\\n          {\\n            value: '310152',\\n            label: '川沙区',\\n            children: [],\\n          },\\n        ],\\n      },\\n    ],\\n  },\\n];\\n\\nconst Demo = () => {\\n  const [value, setValue] = useState([]);\\n\\n  return (\\n    <List>\\n      <List.Item\\n        title=\\\"选择城市\\\"\\n        suffix={\\n          <Button\\n            size=\\\"xs\\\"\\n            onClick={async () => {\\n              const { value: changedValue } = await Cascader.prompt({\\n                value,\\n                dataSource: PROMPT_DATA,\\n              });\\n              if (!changedValue) return;\\n              setValue(changedValue);\\n              Toast.show(JSON.stringify(changedValue));\\n            }}\\n          >\\n            选择\\n          </Button>\\n        }\\n      />\\n    </List>\\n  );\\n};\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n## CascaderView 级联选择视图\\n\\n```jsx\\nimport { useState } from 'react';\\nimport { CascaderView } from 'zarm';\\n\\nconst Demo = () => {\\n  const [value, setValue] = useState([]);\\n\\n  const District = [\\n    {\\n      value: '340000',\\n      label: '安徽省',\\n      children: [\\n        {\\n          value: '340800',\\n          label: '安庆市',\\n          children: [\\n            {\\n              value: '340803',\\n              label: '大观区',\\n              children: [],\\n            },\\n            {\\n              value: '340822',\\n              label: '怀宁县',\\n              children: [],\\n            },\\n            {\\n              value: '340882',\\n              label: '其它区',\\n              children: [],\\n            },\\n          ],\\n        },\\n      ],\\n    },\\n    {\\n      value: '310000',\\n      label: '上海',\\n      children: [\\n        {\\n          value: '310100',\\n          label: '上海市',\\n          children: [\\n            {\\n              value: '310113',\\n              label: '宝山区',\\n              children: [],\\n            },\\n            {\\n              value: '310105',\\n              label: '长宁区',\\n              children: [],\\n            },\\n            {\\n              value: '310230',\\n              label: '崇明县',\\n              children: [],\\n            },\\n            {\\n              value: '310152',\\n              label: '川沙区',\\n              children: [],\\n            },\\n          ],\\n        },\\n      ],\\n    },\\n  ];\\n\\n  return (\\n    <CascaderView\\n      value={value}\\n      dataSource={District}\\n      onChange={(value, items) => {\\n        console.log('onChange', value, items);\\n      }}\\n    />\\n  );\\n};\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n## API\\n\\n| 属性         | 类型                             | 默认值                                                   | 说明                                     |\\n| :----------- | :------------------------------- | :------------------------------------------------------- | :--------------------------------------- |\\n| dataSource   | CascaderOption[]                 | []                                                       | 数据源                                   |\\n| defaultValue | CascaderValue[]                  | -                                                        | 初始值                                   |\\n| value        | CascaderValue[]                  | -                                                        | 值                                       |\\n| fieldNames   | object                           | { label: `label`, value: `value`, children: `children` } | 自定义节点 label、value、children 的字段 |\\n| itemRender   | (data?: object) => data.label    | (data?: object) => data.label                            | 单个选项的展示                           |\\n| onChange     | (value: CascaderValue[]) => void | -                                                        | 值变化时触发的回调函数                   |\\n\\n### 指令式调用\\n\\nCascader 支持指令式调用，提供了 `prompt` 方法\\n\\n```tsx\\nprompt: (props: Omit<CascaderProps, 'visible' | 'visible' | 'children'>) =>\\n  Promise<CascaderValue[] | null>;\\n```\\n\\n`prompt` 方法的返回值是一个 Promise，如果用户点击了确定，从 Promise 中可以解析到 `CascaderValue[]`，而如果用户是触发的取消操作，那么 Promise 中的值是 `null`。你可以通过 `await` 或 `.then()` 来获取到其中的值：\\n\\n```tsx\\nconst value = await Cascader.prompt({\\n  dataSource: dataSourceConfig,\\n});\\n\\nCascader.prompt({\\n  columns: dataSourceConfig,\\n}).then((value) => {\\n  // ...\\n});\\n```\\n\\n### 仅 Cascader 支持的属性\\n\\n| 属性         | 类型                             | 默认值   | 说明                                           |\\n| :----------- | :------------------------------- | :------- | :--------------------------------------------- |\\n| visible      | boolean                          | false    | 是否展示                                       |\\n| title        | string                           | '请选择' | 选择器标题                                     |\\n| confirmText  | string                           | '确定'   | 确定栏文字                                     |\\n| cancelText   | string                           | '取消'   | 取消栏文字                                     |\\n| maskClosable | boolean                          | true     | 是否点击遮罩层时关闭，需要和 onCancel 一起使用 |\\n| safeArea     | boolean                          | false    | 是否适配安全区域                               |\\n| onConfirm    | (value: CascaderValue[]) => void | -        | 点击确定时触发的回调函数                       |\\n| onCancel     | () => void                       | -        | 点击取消时触发的回调函数                       |\\n\\n### CascaderValue\\n\\n`string | number`\\n\\n### CascaderOption\\n\\n| 属性     | 类型             | 默认值 | 说明         |\\n| :------- | :--------------- | :----- | :----------- |\\n| value    | CascaderValue    | -      | 选项值       |\\n| label    | React.ReactNode  | -      | 选项显示名称 |\\n| children | CascaderOption[] | -      | 子选项       |\\n\\n## CSS 变量\\n\\n### Cascader\\n\\n| 属性                       | 默认值                         | 说明                 |\\n| :------------------------- | :----------------------------- | :------------------- |\\n| --header-height            | '45px'                         | 头部高度             |\\n| --header-font-size         | '16px'                         | 头部文字大小         |\\n| --header-background        | '#f7f7f7'                      | 头部背景             |\\n| --header-title-text-color  | 'var(--za-color-text)'         | 头部标题文字颜色     |\\n| --header-submit-text-color | 'var(--za-theme-primary)'      | 头部提交按钮文字颜色 |\\n| --header-cancel-text-color | 'var(--za-color-text-caption)' | 头部取消按钮文字颜色 |\\n\\n### CascaderView\\n\\n| 属性                       | 默认值                             | 说明             |\\n| :------------------------- | :--------------------------------- | :--------------- |\\n| --background               | '#fff'                             | 弹层背景         |\\n| --padding                  | 'var(--za-padding-v-sm)'           | 选项内边距       |\\n| --tab-text-color           | 'var(--za-color-text-placeholder)' | 标签文字颜色     |\\n| --tab-active-text-color    | 'var(--za-theme-primary)'          | 标签选中文字颜色 |\\n| --options-height           | '300px'                            | 选项面板高度     |\\n| --option-font-size         | 'var(--za-font-size-sm)'           | 选项字体大小     |\\n| --option-height            | '44px'                             | 选项高度         |\\n| --option-text-color        | 'var(--za-color-text)'             | 选项文字颜色     |\\n| --option-active-text-color | 'var(--za-theme-primary)'          | 选项选中文字颜色 |\\n\";"],"names":[],"sourceRoot":""}