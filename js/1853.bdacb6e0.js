(self.webpackChunksite=self.webpackChunksite||[]).push([[1853],{71853:function(n,t,e){"use strict";e.r(t),t.default="# Drag 拖拽\n\n## 基本用法\n\n```jsx\nimport { useEffect, useState, useRef } from 'react';\nimport { Drag, Button } from 'zarm';\n\nlet currentPoint = [0, 0];\n\nconst Demo = () => {\n  const containerRef = useRef();\n  const boxRef = useRef();\n  const [point, setPoint] = useState([0, 0]);\n  const [drag, setDrag] = useState(false);\n\n  useEffect(() => {\n    const { width, height } = boxRef.current.getBoundingClientRect();\n    const {\n      width: containerWidth,\n      height: containerHeight,\n    } = containerRef.current.getBoundingClientRect();\n\n    currentPoint[0] = Math.round(Math.random() * (containerWidth - width));\n    currentPoint[1] = Math.round(Math.random() * (containerHeight - height));\n    setPoint(currentPoint);\n\n    document.body.style.overflow = 'hidden';\n\n    return () => {\n      document.body.style.overflow = 'auto';\n    };\n  }, []);\n\n  const onDragStart = (event, dragState) => {\n    console.log('onDragStart', dragState);\n    setDrag(true);\n  };\n\n  const onDragMove = (event, dragState) => {\n    console.log('onDragMove', dragState);\n\n    const { width, height } = boxRef.current.getBoundingClientRect();\n    const {\n      width: containerWidth,\n      height: containerHeight,\n    } = containerRef.current.getBoundingClientRect();\n\n    let newX = currentPoint[0] + dragState.offsetX;\n    let newY = currentPoint[1] + dragState.offsetY;\n\n    if (newX < 0) {\n      newX = 0;\n    }\n    if (newX > containerWidth - width) {\n      newX = containerWidth - width;\n    }\n    if (newY < 0) {\n      newY = 0;\n    }\n    if (newY > containerHeight - height) {\n      newY = containerHeight - height;\n    }\n\n    setPoint([newX, newY]);\n    return true;\n  };\n\n  const onDragEnd = (event, dragState) => {\n    console.log('onDragEnd', dragState);\n\n    currentPoint = point;\n    setDrag(false);\n  };\n\n  return (\n    <div\n      ref={containerRef}\n      style={{\n        height: 300,\n        backgroundColor: '#5b5c60',\n        position: 'relative',\n      }}\n    >\n      <Drag onDragStart={onDragStart} onDragMove={onDragMove} onDragEnd={onDragEnd}>\n        <div\n          ref={boxRef}\n          style={{\n            display: 'inline-block',\n            transform: `translate3d(${point[0]}px, ${point[1]}px, 0)`,\n          }}\n        >\n          {drag ? (\n            <Button theme=\"danger\">Let me go!</Button>\n          ) : (\n            <Button theme=\"primary\">Catch me~</Button>\n          )}\n        </div>\n      </Drag>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## API\n\n| 属性        | 类型                                                                 | 默认值 | 说明                       |\n| :---------- | :------------------------------------------------------------------- | :----- | :------------------------- |\n| onDragStart | (event?: MouseEvent \\| TouchEvent, dragState?: DragState) => void    | -      | 触摸/点击 起始时触发的事件 |\n| onDragMove  | (event?: MouseEvent \\| TouchEvent, dragState?: DragState) => boolean | -      | 拖拽移动时触发的事件       |\n| onDragEnd   | (event?: MouseEvent \\| TouchEvent, dragState?: DragState) => void    | -      | 触摸/点击 结束时触发的事件 |\n\n### DragState\n\n| 属性      | 类型   | 默认值     | 说明          |\n| :-------- | :----- | :--------- | :------------ |\n| startTime | Date   | new Date() | 起始时间      |\n| startX    | number | -          | 起始点 x 坐标 |\n| startY    | number | -          | 起始点 y 坐标 |\n| offsetX   | number | -          | 横向偏移量    |\n| offsetY   | number | -          | 纵向偏移量    |\n"}}]);