{"version":3,"file":"js/3159.56719469.js","mappings":"0GAAA","sources":["webpack://site/../zarm/src/keyboard/demo.md"],"sourcesContent":["export default \"# Keyboard 虚拟键盘\\n\\n## Keyboard 平铺键盘\\n\\n```jsx\\nimport { useState } from 'react';\\nimport { List, Keyboard, Radio, Slider, Switch, Button } from 'zarm';\\n\\nconst DEFAULT_STYLE = {\\n  height: 52,\\n  fontSize: 30,\\n  gap: 6,\\n  borderRadius: 5,\\n  boxShadow: true,\\n};\\n\\n// 自定义车牌键盘\\nconst CAR_PLATE = {\\n  columns: 7,\\n  keys: [\\n    '沪',\\n    '苏',\\n    {\\n      text: '黑',\\n      disabled: true,\\n    },\\n    {\\n      text: '辽',\\n      disabled: true,\\n    },\\n    '浙',\\n    '赣',\\n    '湘',\\n    '晋',\\n    '豫',\\n    '云',\\n    '冀',\\n    '皖',\\n    '鲁',\\n    '新',\\n    '鄂',\\n    '桂',\\n    '甘',\\n    '蒙',\\n    '陕',\\n    {\\n      text: '吉',\\n      disabled: true,\\n    },\\n    '闽',\\n    '贵',\\n    '粤',\\n    '川',\\n    '青',\\n    '藏',\\n    {\\n      text: 'ok',\\n      rowSpan: 2,\\n      colSpan: 2,\\n    },\\n    '琼',\\n    '宁',\\n    '渝',\\n    '京',\\n    '津',\\n  ],\\n};\\n\\nconst Demo = () => {\\n  const [type, setType] = useState('number');\\n  const [dataSource, setDataSource] = useState(null);\\n  const [style, setStyle] = useState(DEFAULT_STYLE);\\n\\n  const onSetType = (type) => {\\n    setType(type);\\n\\n    if (type === 'custom') {\\n      setDataSource(CAR_PLATE);\\n      setStyle({ ...DEFAULT_STYLE, fontSize: 20, height: 40 });\\n    } else {\\n      setDataSource(null);\\n      setStyle(DEFAULT_STYLE);\\n    }\\n  };\\n\\n  const keyStyle = {\\n    '--item-height': `${style.height}px`,\\n    '--item-font-size': `${style.fontSize}px`,\\n    '--item-gap': `${style.gap}px`,\\n    '--item-border-radius': `${style.borderRadius}px`,\\n    '--item-box-shadow': !style.boxShadow ? 'none' : undefined,\\n  };\\n\\n  return (\\n    <>\\n      <List>\\n        <List.Item\\n          title=\\\"键盘类型\\\"\\n          suffix={\\n            <Radio.Group compact type=\\\"button\\\" value={type} onChange={onSetType}>\\n              <Radio value=\\\"number\\\">数字</Radio>\\n              <Radio value=\\\"price\\\">金额</Radio>\\n              <Radio value=\\\"idcard\\\">身份证</Radio>\\n              <Radio value=\\\"custom\\\">自定义</Radio>\\n            </Radio.Group>\\n          }\\n        />\\n        <List.Item title=\\\"按键高度\\\">\\n          <Slider\\n            value={style.height}\\n            onChange={(value) => setStyle({ ...style, height: value })}\\n          />{' '}\\n          {style.height}px\\n        </List.Item>\\n        <List.Item title=\\\"按键字号\\\">\\n          <Slider\\n            max={50}\\n            value={style.fontSize}\\n            onChange={(value) => setStyle({ ...style, fontSize: value })}\\n          />\\n          {style.fontSize}px\\n        </List.Item>\\n        <List.Item title=\\\"按键间距\\\">\\n          <Slider\\n            max={15}\\n            value={style.gap}\\n            onChange={(value) => setStyle({ ...style, gap: value })}\\n          />\\n          {style.gap}px\\n        </List.Item>\\n        <List.Item title=\\\"按键圆角\\\">\\n          <Slider\\n            value={style.borderRadius}\\n            onChange={(value) => setStyle({ ...style, borderRadius: value })}\\n          />\\n          {style.borderRadius}px\\n        </List.Item>\\n        <List.Item title=\\\"按键阴影\\\">\\n          <Switch\\n            checked={style.boxShadow}\\n            onChange={(checked) => setStyle({ ...style, boxShadow: checked })}\\n          />\\n        </List.Item>\\n        <List.Item\\n          suffix={\\n            <Button size=\\\"xs\\\" onClick={() => onSetType(type)}>\\n              还原设置\\n            </Button>\\n          }\\n        />\\n      </List>\\n\\n      <Keyboard\\n        type={type}\\n        dataSource={dataSource}\\n        style={keyStyle}\\n        onKeyClick={(key) => console.log(key)}\\n      />\\n    </>\\n  );\\n};\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n## KeyboardPicker 键盘触发器\\n\\n```jsx\\nimport { useState } from 'react';\\nimport { List, Button, KeyboardPicker } from 'zarm';\\n\\nconst Demo = () => {\\n  const [visible, setVisible] = useState(false);\\n\\n  const toggle = () => {\\n    setVisible(!visible);\\n  };\\n\\n  const onKeyClick = (key) => {\\n    console.log(key);\\n    if (['close', 'ok'].indexOf(key) > -1) {\\n      toggle();\\n      return;\\n    }\\n    // do something...\\n  };\\n\\n  return (\\n    <>\\n      <List>\\n        <List.Item\\n          title=\\\"拾取器触发方式\\\"\\n          suffix={\\n            <Button size=\\\"xs\\\" onClick={toggle}>\\n              {visible ? '关闭' : '开启'}\\n            </Button>\\n          }\\n        />\\n      </List>\\n\\n      <KeyboardPicker visible={visible} onKeyClick={onKeyClick} />\\n    </>\\n  );\\n};\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n## API\\n\\n| 属性       | 类型                                | 默认值   | 说明                                                                                                            |\\n| :--------- | :---------------------------------- | :------- | :-------------------------------------------------------------------------------------------------------------- |\\n| type       | string                              | 'number' | 键盘类型，可选值 `number`、`price`、`idcard`                                                                    |\\n| onKeyClick | (key: KeyBoardKey['value']) => void | -        | 点击按键时触发的回调函数                                                                                        |\\n| dataSource | KeyBoardDataSource                  | -        | 自定义键盘，格式参考 [zarm/lib/keyboard/BuildInConfig.js](https://unpkg.com/zarm/lib/keyboard/BuildInConfig.js) |\\n\\n### KeyBoardDataSource\\n\\n| 属性    | 类型                                   | 默认值 | 说明       |\\n| :------ | :------------------------------------- | :----- | :--------- |\\n| columns | number                                 | -      | 每行的列数 |\\n| keys    | KeyBoardKey['text'][] \\\\| KeyBoardKey[] | []     | 按键配置   |\\n\\n### KeyBoardKey\\n\\n| 属性     | 类型            | 默认值 | 说明                               |\\n| :------- | :-------------- | :----- | :--------------------------------- |\\n| value    | string          | -      | 按键值，未设置时取 `text` 属性的值 |\\n| text     | React.ReactNode | -      | 按键内容                           |\\n| rowSpan  | number          | -      | 可横跨的行数                       |\\n| colSpan  | number          | -      | 可横跨的列数                       |\\n| disabled | boolean         | false  | 是否禁用                           |\\n\\n### 仅 KeyboardPicker 支持的属性\\n\\n| 属性     | 类型    | 默认值 | 说明                   |\\n| :------- | :------ | :----- | :--------------------- |\\n| visible  | boolean | false  | 是否展示               |\\n| destroy  | boolean | true   | 弹层关闭后是否移除节点 |\\n| safeArea | boolean | false  | 是否适配安全区域       |\\n\\n## CSS 变量\\n\\n| 属性                     | 默认值                       | 说明                 |\\n| :----------------------- | :--------------------------- | :------------------- |\\n| --background             | '#d8d8d8'                    | 面板背景色           |\\n| --item-background        | '#fff'                       | 按键背景色           |\\n| --item-active-background | 'rgba(162, 165, 176, 0.8)'   | 按键激活状态背景色   |\\n| --item-gap               | '6px'                        | 按键间距             |\\n| --item-height            | '52px'                       | 按键高度             |\\n| --item-font-size         | '30px'                       | 按键字体大小         |\\n| --item-border-radius     | '5px'                        | 按键圆角             |\\n| --item-box-shadow        | '0 1px 0 #898a8d'            | 按键阴影             |\\n| --ok-background          | 'var(--za-theme-primary)'    | 确定按键背景色       |\\n| --ok-font-size           | '20px'                       | 确定按键字体大小     |\\n| --ok-text-color          | '#fff'                       | 确定按键字体颜色     |\\n| --opacity-disabled       | 'var(--za-opacity-disabled)' | 按键禁用状态不透明度 |\\n\";"],"names":[],"sourceRoot":""}