{"version":3,"sources":["webpack://site/../zarm/src/checkbox/demo.md"],"names":[],"mappings":"0GAAA","file":"js/8680.e5ce8e45.js","sourcesContent":["export default \"# Checkbox 复选框\\n\\n## 基本用法\\n\\n```jsx\\nimport { Cell, Checkbox } from 'zarm';\\n\\nReactDOM.render(\\n  <>\\n    <Cell>\\n      <Checkbox>普通</Checkbox>\\n    </Cell>\\n    <Cell>\\n      <Checkbox defaultChecked>默认选中</Checkbox>\\n    </Cell>\\n    <Cell>\\n      <Checkbox disabled>禁用</Checkbox>\\n    </Cell>\\n    <Cell>\\n      <Checkbox defaultChecked disabled>\\n        选中且禁用\\n      </Checkbox>\\n    </Cell>\\n    <Cell>\\n      <div className=\\\"agreement-box\\\">\\n        <Checkbox id=\\\"agreement\\\" />\\n        <label htmlFor=\\\"agreement\\\">\\n          阅读并同意\\n          <a\\n            href=\\\"/#\\\"\\n            onClick={(e) => {\\n              e.preventDefault();\\n              alert('agree it');\\n            }}\\n          >\\n            《XXX条款》\\n          </a>\\n          中的相关规定\\n        </label>\\n      </div>\\n    </Cell>\\n  </>,\\n  mountNode,\\n);\\n```\\n\\n## 受控使用\\n\\n```jsx\\nimport { useState } from 'react';\\nimport { Cell, Checkbox, Modal } from 'zarm';\\n\\nconst Demo = () => {\\n  const [checked, setChecked] = useState(false);\\n\\n  const onChange = (e) => {\\n    if (!e.target.checked) {\\n      Modal.confirm({\\n        content: '是否要取消选择',\\n        cancelText: '不取消',\\n      }).then((res) => {\\n        res && setChecked(false);\\n      });\\n      return;\\n    }\\n    setChecked(true);\\n  };\\n\\n  return (\\n    <Cell>\\n      <Checkbox checked={checked} onChange={onChange}>\\n        取消勾选前确认\\n      </Checkbox>\\n    </Cell>\\n  );\\n};\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n## 组合使用\\n\\n```jsx\\nimport { useState } from 'react';\\nimport { Cell, Checkbox } from 'zarm';\\n\\nconst Demo = () => {\\n  const [value, setValue] = useState([]);\\n\\n  const onCheckedAll = (e) => {\\n    setValue(e.target.checked ? ['0', '1', '2'] : []);\\n  };\\n\\n  return (\\n    <>\\n      <Cell>\\n        <Checkbox\\n          checked={value.length === 3}\\n          indeterminate={value.length < 3 && value.length > 0}\\n          onChange={onCheckedAll}\\n        >\\n          全选 / 反选\\n        </Checkbox>\\n      </Cell>\\n      <Cell>\\n        <Checkbox.Group value={value} onChange={setValue}>\\n          <Checkbox value=\\\"0\\\">选项一</Checkbox>\\n          <Checkbox value=\\\"1\\\">选项二</Checkbox>\\n          <Checkbox value=\\\"2\\\">选项三</Checkbox>\\n        </Checkbox.Group>\\n      </Cell>\\n    </>\\n  );\\n};\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n## 按钮样式\\n\\n```jsx\\nimport { useState } from 'react';\\nimport { Cell, Checkbox } from 'zarm';\\n\\nconst Demo = () => {\\n  const [value, setValue] = useState([]);\\n\\n  return (\\n    <div>\\n      <Cell\\n        description={\\n          <Checkbox.Group\\n            type=\\\"button\\\"\\n            value={value}\\n            onChange={(value) => {\\n              setValue(value);\\n              console.log(`checked to ${value}`);\\n            }}\\n          >\\n            <Checkbox value=\\\"0\\\">选项一</Checkbox>\\n            <Checkbox value=\\\"1\\\">选项二</Checkbox>\\n            <Checkbox value=\\\"2\\\">选项三</Checkbox>\\n          </Checkbox.Group>\\n        }\\n      >\\n        普通\\n      </Cell>\\n\\n      <Cell\\n        description={\\n          <Checkbox.Group type=\\\"button\\\" defaultValue={['0', '1']}>\\n            <Checkbox value=\\\"0\\\">选项一</Checkbox>\\n            <Checkbox value=\\\"1\\\">选项二</Checkbox>\\n            <Checkbox value=\\\"2\\\">选项三</Checkbox>\\n          </Checkbox.Group>\\n        }\\n      >\\n        指定默认值\\n      </Cell>\\n\\n      <Cell\\n        description={\\n          <Checkbox.Group type=\\\"button\\\">\\n            <Checkbox value=\\\"0\\\">选项一</Checkbox>\\n            <Checkbox value=\\\"1\\\" disabled>\\n              选项二\\n            </Checkbox>\\n            <Checkbox value=\\\"2\\\" disabled checked>\\n              选项三\\n            </Checkbox>\\n          </Checkbox.Group>\\n        }\\n      >\\n        禁用指定项\\n      </Cell>\\n\\n      <Cell\\n        description={\\n          <Checkbox.Group type=\\\"button\\\" shape=\\\"rect\\\">\\n            <Checkbox value=\\\"0\\\">选项一</Checkbox>\\n            <Checkbox value=\\\"1\\\">选项二</Checkbox>\\n            <Checkbox value=\\\"2\\\">选项三</Checkbox>\\n          </Checkbox.Group>\\n        }\\n      >\\n        直角\\n      </Cell>\\n\\n      <Cell\\n        description={\\n          <Checkbox.Group type=\\\"button\\\" shape=\\\"round\\\">\\n            <Checkbox value=\\\"0\\\">选项一</Checkbox>\\n            <Checkbox value=\\\"1\\\">选项二</Checkbox>\\n            <Checkbox value=\\\"2\\\">选项三</Checkbox>\\n          </Checkbox.Group>\\n        }\\n      >\\n        椭圆角\\n      </Cell>\\n\\n      <Cell\\n        description={\\n          <Checkbox.Group ghost type=\\\"button\\\" defaultValue={['2']}>\\n            <Checkbox value=\\\"0\\\">选项一</Checkbox>\\n            <Checkbox value=\\\"1\\\">选项二</Checkbox>\\n            <Checkbox value=\\\"2\\\" disabled>\\n              选项三\\n            </Checkbox>\\n          </Checkbox.Group>\\n        }\\n      >\\n        幽灵按钮\\n      </Cell>\\n    </div>\\n  );\\n};\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n## 块级样式\\n\\n```jsx\\nimport { Cell, Checkbox } from 'zarm';\\n\\nReactDOM.render(\\n  <Cell>\\n    <Checkbox.Group block type=\\\"button\\\">\\n      <Checkbox value=\\\"0\\\">选项一</Checkbox>\\n      <Checkbox value=\\\"1\\\">选项二</Checkbox>\\n      <Checkbox value=\\\"2\\\">选项三</Checkbox>\\n    </Checkbox.Group>\\n  </Cell>,\\n  mountNode,\\n);\\n```\\n\\n## 列表样式\\n\\n```jsx\\nimport { Checkbox } from 'zarm';\\n\\nReactDOM.render(\\n  <Checkbox.Group type=\\\"cell\\\">\\n    <Checkbox value=\\\"0\\\">选项一</Checkbox>\\n    <Checkbox value=\\\"1\\\">选项二</Checkbox>\\n    <Checkbox value=\\\"2\\\" disabled>\\n      选项三（禁止选择）\\n    </Checkbox>\\n  </Checkbox.Group>,\\n  mountNode,\\n);\\n```\\n\\n## 列表样式禁用状态\\n\\n```jsx\\nimport { Checkbox } from 'zarm';\\n\\nReactDOM.render(\\n  <Checkbox.Group disabled type=\\\"cell\\\">\\n    <Checkbox value=\\\"0\\\">选项一</Checkbox>\\n    <Checkbox value=\\\"1\\\">选项二</Checkbox>\\n    <Checkbox value=\\\"2\\\" checked>\\n      选项三\\n    </Checkbox>\\n  </Checkbox.Group>,\\n  mountNode,\\n);\\n```\\n\\n## API\\n\\n### Checkbox\\n\\n| 属性           | 类型                                            | 默认值 | 说明                                                |\\n| :------------- | :---------------------------------------------- | :----- | :-------------------------------------------------- |\\n| type           | string                                          | -      | 显示类型，可选值 `button`, `cell`                   |\\n| disabled       | boolean                                         | false  | 是否禁用                                            |\\n| value          | string &#124; number                            | -      | 值                                                  |\\n| checked        | boolean                                         | -      | 当前是否选中                                        |\\n| defaultChecked | boolean                                         | -      | 初始是否选中                                        |\\n| indeterminate  | boolean                                         | false  | 当前是否为未全选状态                                |\\n| id             | string                                          | -      | 方便外部带有 for 属性的 label 标签控制当前 checkbox |\\n| onChange       | (event?: ChangeEvent<HTMLInputElement>) => void | -      | 值变化时触发的回调函数                              |\\n\\n### Checkbox.Group\\n\\n| 属性         | 类型                                    | 默认值   | 说明                                               |\\n| :----------- | :-------------------------------------- | :------- | :------------------------------------------------- |\\n| type         | string                                  | -        | 显示类型，可选值 `button`, `cell`                  |\\n| value        | number[] \\\\| string[]                    | []       | 选中值                                             |\\n| defaultValue | number[] \\\\| string[]                    | []       | 初始选中值                                         |\\n| disabled     | boolean                                 | false    | 是否禁用                                           |\\n| block        | boolean                                 | false    | 子项是否为块级元素                                 |\\n| onChange     | (values?: number[] \\\\| string[]) => void | -        | 值变化时触发的回调函数                             |\\n| size         | string                                  | 'xs'     | 按钮类型时的大小，可选值为 `lg`、`md`、`sm`、`xs`  |\\n| shape        | string                                  | 'radius' | 按钮类型时的形状，可选值 `rect`, `radius`, `round` |\\n| ghost        | boolean                                 | false    | 按钮类型时，选中项样式是否为幽灵按钮               |\\n\";"],"sourceRoot":""}