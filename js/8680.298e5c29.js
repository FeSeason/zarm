"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[8680],{78680:function(n,e,o){o.r(e),e.default="# Checkbox 复选框\n\n## 基本用法\n\n```jsx\nimport { List, Checkbox } from 'zarm';\n\nReactDOM.render(\n  <List>\n    <List.Item>\n      <Checkbox>普通</Checkbox>\n    </List.Item>\n    <List.Item>\n      <Checkbox defaultChecked>默认选中</Checkbox>\n    </List.Item>\n    <List.Item>\n      <Checkbox disabled>禁用</Checkbox>\n    </List.Item>\n    <List.Item>\n      <Checkbox defaultChecked disabled>\n        选中且禁用\n      </Checkbox>\n    </List.Item>\n  </List>,\n  mountNode,\n);\n```\n\n## 受控使用\n\n```jsx\nimport { useState } from 'react';\nimport { List, Checkbox, Modal } from 'zarm';\n\nconst Demo = () => {\n  const [checked, setChecked] = useState(false);\n\n  const onChange = (e) => {\n    if (!e.target.checked) {\n      Modal.confirm({\n        content: '是否要取消选择',\n        cancelText: '不取消',\n      }).then((res) => {\n        res && setChecked(false);\n      });\n      return;\n    }\n    setChecked(true);\n  };\n\n  return (\n    <List>\n      <List.Item>\n        <Checkbox checked={checked} onChange={onChange}>\n          取消勾选前确认\n        </Checkbox>\n      </List.Item>\n    </List>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## 组合使用\n\n```jsx\nimport { useState } from 'react';\nimport { List, Checkbox } from 'zarm';\n\nconst Demo = () => {\n  const [value, setValue] = useState([]);\n\n  const onCheckedAll = (e) => {\n    setValue(e.target.checked ? ['0', '1', '2'] : []);\n  };\n\n  const onChange = (value) => {\n    console.log('onChange', value);\n    setValue(value);\n  };\n\n  return (\n    <List>\n      <List.Item>\n        <Checkbox\n          checked={value.length === 3}\n          indeterminate={value.length < 3 && value.length > 0}\n          onChange={onCheckedAll}\n        >\n          全选 / 反选\n        </Checkbox>\n      </List.Item>\n      <List.Item>\n        <Checkbox.Group value={value} onChange={onChange}>\n          <Checkbox value=\"0\">选项一</Checkbox>\n          <Checkbox value=\"1\">选项二</Checkbox>\n          <Checkbox value=\"2\">选项三</Checkbox>\n        </Checkbox.Group>\n      </List.Item>\n    </List>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## 禁用\n\n```jsx\nimport { List, Checkbox } from 'zarm';\n\nReactDOM.render(\n  <List>\n    <List.Item>\n      <Checkbox.Group disabled>\n        <Checkbox value=\"0\">选项一</Checkbox>\n        <Checkbox value=\"1\">选项二</Checkbox>\n        <Checkbox value=\"2\">选项三</Checkbox>\n      </Checkbox.Group>\n    </List.Item>\n  </List>,\n  mountNode,\n);\n```\n\n## 通栏样式\n\n```jsx\nimport { List, Checkbox } from 'zarm';\n\nReactDOM.render(\n  <List>\n    <List.Item>\n      <Checkbox.Group block>\n        <Checkbox value=\"0\">选项一</Checkbox>\n        <Checkbox value=\"1\">选项二</Checkbox>\n      </Checkbox.Group>\n    </List.Item>\n  </List>,\n  mountNode,\n);\n```\n\n## 按钮样式\n\n```jsx\nimport { Checkbox, List } from 'zarm';\n\nReactDOM.render(\n  <List>\n    <List.Item title=\"普通\">\n      <Checkbox.Group type=\"button\">\n        <Checkbox value=\"0\">选项一</Checkbox>\n        <Checkbox value=\"1\">选项二</Checkbox>\n        <Checkbox value=\"2\">选项三</Checkbox>\n      </Checkbox.Group>\n    </List.Item>\n    <List.Item title=\"禁用\">\n      <Checkbox.Group type=\"button\" disabled>\n        <Checkbox value=\"0\">选项一</Checkbox>\n        <Checkbox value=\"1\">选项二</Checkbox>\n        <Checkbox value=\"2\">选项三</Checkbox>\n      </Checkbox.Group>\n    </List.Item>\n    <List.Item title=\"通栏\">\n      <Checkbox.Group type=\"button\" block>\n        <Checkbox value=\"0\">选项一</Checkbox>\n        <Checkbox value=\"1\">选项二</Checkbox>\n        <Checkbox value=\"2\">选项三</Checkbox>\n      </Checkbox.Group>\n    </List.Item>\n  </List>,\n  mountNode,\n);\n```\n\n## 列表样式\n\n```jsx\nimport { Checkbox } from 'zarm';\n\nReactDOM.render(\n  <Checkbox.Group type=\"list\">\n    <Checkbox value=\"0\">选项一</Checkbox>\n    <Checkbox value=\"1\">选项二</Checkbox>\n    <Checkbox value=\"2\" disabled>\n      选项三（禁止选择）\n    </Checkbox>\n  </Checkbox.Group>,\n  mountNode,\n);\n```\n\n## 列表样式（尾部图标）\n\n```jsx\nimport { Checkbox } from 'zarm';\n\nReactDOM.render(\n  <Checkbox.Group type=\"list\" iconAlign=\"after\">\n    <Checkbox value=\"0\">选项一</Checkbox>\n    <Checkbox value=\"1\">选项二</Checkbox>\n    <Checkbox value=\"2\" disabled>\n      选项三（禁止选择）\n    </Checkbox>\n  </Checkbox.Group>,\n  mountNode,\n);\n```\n\n## 自定义图标\n\n```jsx\nimport { List, Checkbox } from 'zarm';\nimport { Star, StarFill, Success, Close  } from '@zarm-design/icons';\n\nReactDOM.render(\n  <List>\n    <List.Item>\n      <Checkbox.Group>\n        <Checkbox\n          value=\"0\"\n          renderIcon={({ checked }) =>\n            checked ? <Success theme=\"primary\" /> : <Close theme=\"danger\" />\n          }\n        >\n          选项一\n        </Checkbox>\n        <Checkbox\n          value=\"1\"\n          renderIcon={({ checked }) =>\n            checked ? <StarFill theme=\"primary\" /> : <Star theme=\"primary\" />\n          }\n        >\n          选项二\n        </Checkbox>\n        <Checkbox value=\"2\">选项三</Checkbox>\n      </Checkbox.Group>\n    </List.Item>\n  </List>,\n  mountNode,\n);\n```\n\n## 自定义样式\n\n```jsx\nimport { useState, useRef } from 'react';\nimport { List, Checkbox } from 'zarm';\nimport { Success } from '@zarm-design/icons';\n\nconst items = ['选项一', '选项二', '选项三'];\n\nconst Demo = () => {\n  const [value, setValue] = useState(['0']);\n\n  const onChange = (value) => {\n    console.log('onChange', value);\n    setValue(value);\n  };\n\n  const CustomCheckbox = (props) => {\n    const checkboxRef = useRef();\n\n    return (\n      <Checkbox\n        ref={checkboxRef}\n        value={props.value}\n        render={({ checked }) => (\n          <div\n            style={{\n              position: 'relative',\n              padding: '4px 8px',\n              fontSize: 14,\n              borderWidth: '1px',\n              borderStyle: 'solid',\n              borderColor: checked ? 'var(--za-theme-primary)' : 'var(--za-theme-default)',\n            }}\n            onClick={() => {\n              checkboxRef.current.toggle();\n            }}\n          >\n            <span\n              style={{\n                display: checked ? 'inline-block' : 'none',\n                position: 'absolute',\n                right: 0,\n                top: 0,\n                fontSize: 0,\n              }}\n            >\n              <Success style={{ fontSize: 10 }} theme=\"primary\" />\n            </span>\n            {props.label}\n          </div>\n        )}\n      />\n    );\n  };\n  return (\n    <List>\n      <List.Item>\n        <Checkbox.Group\n          value={value}\n          onChange={onChange}\n          style={{\n            '--group-spacing-horizontal': '8px',\n            '--group-spacing-vertical': '6px',\n          }}\n        >\n          {items.map((item, index) => (\n            <CustomCheckbox key={+index} value={String(index)} label={item} />\n          ))}\n        </Checkbox.Group>\n      </List.Item>\n    </List>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## API\n\n### Checkbox\n\n| 属性           | 类型                                             | 默认值 | 说明                                                |\n| :------------- | :----------------------------------------------- | :----- | :-------------------------------------------------- |\n| disabled       | boolean                                          | false  | 是否禁用                                            |\n| value          | number \\| string                             | -      | 值                                                  |\n| checked        | boolean                                          | false  | 当前是否选中                                        |\n| defaultChecked | boolean                                          | false  | 初始是否选中                                        |\n| indeterminate  | boolean                                          | false  | 当前是否为半选状态                                |\n| id             | string                                           | -      | 方便外部带有 for 属性的 label 标签控制当前 checkbox |\n| onChange       | (event: ChangeEvent\\<HTMLInputElement\\>) => void | -      | 值变化时触发的回调函数                              |\n| renderIcon     | (props: number \\| string) => React.ReactNode        | -      | 自定义图标渲染函数                                  |\n| render         | (props: number \\| string) => React.ReactNode        | -      | 自定义样式渲染函数                                  |\n\n### Checkbox.Group\n\n| 属性          | 类型                                   | 默认值   | 说明                                                |\n| :------------ | :------------------------------------- | :------- | :-------------------------------------------------- |\n| type          | string                                 | -        | 显示类型，可选值 `button`、`list`                   |\n| value         | number[] \\| string[]                   | []       | 选中值                                              |\n| defaultValue  | number[] \\| string[]                   | []       | 初始选中值                                          |\n| disabled      | boolean                                | false    | 是否禁用                                            |\n| block         | boolean                                | false    | 子项是否为块级元素                                  |\n| iconAlign | string                                 | 'before' | type 为`list`时图标的位置，可选值 `before`、`after` |\n| onChange      | (values: number[] \\| string[]) => void | -        | 值变化时触发的回调函数                              |\n\n## CSS 变量\n\n### Checkbox\n\n| 属性                         | 默认值                                       | 说明                 |\n| :--------------------------- | :------------------------------------------- | :------------------- |\n| --icon-size                  | '22px'                                       | 图标大小             |\n| --icon-background            | 'transparent'                                | 图标背景色           |\n| --icon-border-radius         | '22px'                                       | 图标圆角大虾皮       |\n| --icon-border-width          | '1px'                                        | 图标边框粗细         |\n| --icon-border-color          | 'rgb(199, 199, 204)'                         | 图标边框颜色         |\n| --tick-font-size             | '16px'                                       | 勾选标记大小         |\n| --tick-color                 | '#fff'                                       | 勾选标记颜色         |\n| --tick-transition            | 'all 0.2s cubic-bezier(.71, -0.46, .88, .6)' | 勾选标记动画效果     |\n| --text-margin-horizontal     | '8px'                                        | 文字横向外边距       |\n| --active-opacity             | 0.6                                          | 激活状态透明度       |\n| --checked-icon-background    | 'var(--za-theme-primary)'                    | 选中状态图标背景色   |\n| --checked-icon-border-color  | 'var(--za-theme-primary)'                    | 选中状态图标边框颜色 |\n| --checked-tick-color         | 'var(--za-theme-primary)'                    | 选中状态勾选标记颜色 |\n| --disabled-icon-background   | '#f2f2f2'                                    | 禁用状态图标背景色   |\n| --disabled-icon-border-color | 'rgba(199, 199, 204, 0.7)'                   | 禁用状态图标边框颜色 |\n| --disabled-text-color        | 'rgba(0, 0, 0, 0.3)'                         | 禁用状态文字颜色     |\n| --disabled--tick-color       | '#bcbcbc'                                    | 禁用状态勾选标记颜色 |\n\n### Checkbox.Group\n\n| 属性                       | 默认值 | 说明                 |\n| :------------------------- | :----- | :------------------- |\n| --group-spacing-vertical   | '8px'  | 组合使用时的纵向间距 |\n| --group-spacing-horizontal | '24px' | 组合使用时的横向间距 |\n\n## Checkbox 指令式 API\n```js\n// 选择\nref.current.check();\n\n// 取消选择\nref.current.uncheck();\n\n// 切换选择\nref.current.toggle();\n```\n"}}]);