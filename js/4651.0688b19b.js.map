{"version":3,"sources":["webpack://site/../zarm/src/picker/demo.md"],"names":[],"mappings":"0GAAA","file":"js/4651.0688b19b.js","sourcesContent":["export default \"# Picker 选择器\\n\\n## 基本用法\\n\\n```jsx\\nimport { useEffect, useRef, useReducer } from 'react';\\nimport { Cell, Button, Picker, Toast } from 'zarm';\\n\\nconst SINGLE_DATA = [\\n  { value: '1', label: '选项一' },\\n  { value: '2', label: '选项二' },\\n  { value: '3', label: '选项三' },\\n  { value: '4', label: '选项四' },\\n  { value: '5', label: '选项五' },\\n];\\n\\n// 普通多列数据\\nconst MULTI_DATA = [\\n  [\\n    { value: '1', label: '选项一' },\\n    { value: '2', label: '选项二' },\\n  ],\\n  [\\n    { value: '3', label: '选项A' },\\n    { value: '4', label: '选项B' },\\n  ],\\n];\\n\\n// 级联数据\\nconst CASCADE_DATA = [\\n  {\\n    value: '1',\\n    label: '北京市',\\n    children: [\\n      { value: '11', label: '海淀区' },\\n      { value: '12', label: '西城区' },\\n    ],\\n  },\\n  {\\n    value: '2',\\n    label: '上海市',\\n    children: [\\n      { value: '21', label: '杨浦区' },\\n      { value: '22', label: '静安区' },\\n    ],\\n  },\\n];\\n\\n// 自定义\\nconst DIY_DATA = [\\n  {\\n    code: '1',\\n    name: '北京市',\\n    children: [\\n      { code: '11', name: '海淀区' },\\n      { code: '12', name: '西城区' },\\n    ],\\n  },\\n  {\\n    code: '2',\\n    name: '上海市',\\n    children: [\\n      { code: '21', name: '黄埔区' },\\n      { code: '22', name: '虹口区' },\\n    ],\\n  },\\n];\\n\\nconst initState = {\\n  single: {\\n    visible: false,\\n    value: '',\\n    dataSource: SINGLE_DATA,\\n  },\\n  multi: {\\n    visible: false,\\n    value: [],\\n    dataSource: MULTI_DATA,\\n  },\\n  cascade: {\\n    visible: false,\\n    value: [],\\n    dataSource: CASCADE_DATA,\\n  },\\n  diy: {\\n    visible: false,\\n    value: [],\\n    dataSource: [],\\n  },\\n  specDOM: {\\n    visible: false,\\n    value: '',\\n    dataSource: SINGLE_DATA,\\n  },\\n};\\n\\nconst reducer = (state, action) => {\\n  const { type, key, value, valueMember, dataSource } = action;\\n\\n  switch (type) {\\n    case 'visible':\\n      return {\\n        ...state,\\n        [key]: {\\n          ...state[key],\\n          visible: !state[key].visible,\\n        },\\n      };\\n\\n    case 'value':\\n      return {\\n        ...state,\\n        [key]: {\\n          ...state[key],\\n          value,\\n        },\\n      };\\n\\n    case 'valueMember':\\n      return {\\n        ...state,\\n        [key]: {\\n          ...state[key],\\n          valueMember,\\n        },\\n      };\\n\\n    case 'dataSource':\\n      return {\\n        ...state,\\n        [key]: {\\n          ...state[key],\\n          dataSource,\\n        },\\n      };\\n\\n    default:\\n  }\\n};\\n\\nconst Demo = () => {\\n  const myRef = useRef();\\n  const [state, dispatch] = useReducer(reducer, initState);\\n\\n  const setVisible = (key) => {\\n    dispatch({ type: 'visible', key });\\n  };\\n\\n  const setValue = (key, value) => {\\n    dispatch({ type: 'value', key, value });\\n  };\\n\\n  const setValueMember = (key, value) => {\\n    dispatch({ type: 'valueMember', key, valueMember: value });\\n  };\\n\\n  const setDataSource = (key, value) => {\\n    dispatch({ type: 'dataSource', key, dataSource: value });\\n  };\\n\\n  useEffect(() => {\\n    // 异步加载数据源测试\\n    setTimeout(() => {\\n      setValue('diy', ['1', '12']);\\n      setDataSource('diy', DIY_DATA);\\n      setValueMember('diy', 'code');\\n    }, 0);\\n  }, []);\\n\\n  return (\\n    <>\\n      <Cell\\n        description={\\n          <Button size=\\\"xs\\\" onClick={() => setVisible('single')}>\\n            选择\\n          </Button>\\n        }\\n      >\\n        单列\\n      </Cell>\\n\\n      <Cell\\n        description={\\n          <Button size=\\\"xs\\\" onClick={() => setVisible('multi')}>\\n            选择\\n          </Button>\\n        }\\n      >\\n        多列\\n      </Cell>\\n\\n      <Cell\\n        description={\\n          <Button size=\\\"xs\\\" onClick={() => setVisible('cascade')}>\\n            选择\\n          </Button>\\n        }\\n      >\\n        级联\\n      </Cell>\\n\\n      <Cell\\n        description={\\n          <Button size=\\\"xs\\\" onClick={() => setVisible('diy')}>\\n            选择\\n          </Button>\\n        }\\n      >\\n        自定义\\n      </Cell>\\n\\n      <Cell\\n        description={\\n          <Button size=\\\"xs\\\" onClick={() => setVisible('specDOM')}>\\n            选择\\n          </Button>\\n        }\\n      >\\n        挂载到指定dom节点\\n      </Cell>\\n\\n      <Picker\\n        visible={state.single.visible}\\n        value={state.single.value}\\n        dataSource={state.single.dataSource}\\n        onOk={(selected) => {\\n          console.log('Single Picker onOk: ', selected);\\n          Toast.show(JSON.stringify(selected));\\n          setValue(\\n            'single',\\n            selected.map((item) => item.value),\\n          );\\n          setVisible('single');\\n        }}\\n        onCancel={() => setVisible('single')}\\n      />\\n\\n      <Picker\\n        visible={state.multi.visible}\\n        value={state.multi.value}\\n        dataSource={state.multi.dataSource}\\n        onOk={(selected) => {\\n          console.log('Multi Picker onOk: ', selected);\\n          Toast.show(JSON.stringify(selected));\\n          setValue(\\n            'multi',\\n            selected.map((item) => item.value),\\n          );\\n          setVisible('multi');\\n        }}\\n        onCancel={() => setVisible('multi')}\\n      />\\n\\n      <Picker\\n        visible={state.cascade.visible}\\n        value={state.cascade.value}\\n        dataSource={state.cascade.dataSource}\\n        onOk={(selected) => {\\n          console.log('Cascade Picker onOk: ', selected);\\n          Toast.show(JSON.stringify(selected));\\n          setValue(\\n            'cascade',\\n            selected.map((item) => item.value),\\n          );\\n          setVisible('cascade');\\n        }}\\n        onCancel={() => setVisible('cascade')}\\n      />\\n\\n      <Picker\\n        visible={state.diy.visible}\\n        title=\\\"custom title\\\"\\n        cancelText=\\\"Cancel\\\"\\n        okText=\\\"Ok\\\"\\n        dataSource={state.diy.dataSource}\\n        value={state.diy.value}\\n        valueMember={state.diy.valueMember}\\n        itemRender={(data) => data.name}\\n        onOk={(selected) => {\\n          console.log('DIY Picker onOk: ', selected);\\n          Toast.show(JSON.stringify(selected));\\n          setValue(\\n            'diy',\\n            selected.map((item) => item.code),\\n          );\\n          setVisible('diy');\\n        }}\\n        onCancel={() => setVisible('diy')}\\n      />\\n\\n      <Picker\\n        visible={state.specDOM.visible}\\n        value={state.specDOM.value}\\n        dataSource={state.specDOM.dataSource}\\n        onOk={(selected) => {\\n          console.log('Picker onOk: ', selected);\\n          Toast.show(JSON.stringify(selected));\\n          setValue(\\n            'specDOM',\\n            selected.map((item) => item.value),\\n          );\\n          setVisible('specDOM');\\n        }}\\n        onCancel={() => setVisible('specDOM')}\\n        mountContainer={() => myRef.current}\\n      />\\n\\n      <div id=\\\"test-div\\\" style={{ position: 'relative', zIndex: 1 }} ref={myRef} />\\n    </>\\n  );\\n};\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n## Select 表单选择器\\n\\n```jsx\\nimport { useState, useEffect } from 'react';\\nimport { Select, Cell } from 'zarm';\\n\\n// 级联数据\\nconst CASCADE_DATA = [\\n  {\\n    value: '1',\\n    label: '北京市',\\n    children: [\\n      { value: '11', label: '海淀区' },\\n      { value: '12', label: '西城区' },\\n    ],\\n  },\\n  {\\n    value: '2',\\n    label: '上海市',\\n    children: [\\n      { value: '21', label: '杨浦区' },\\n      { value: '22', label: '静安区' },\\n    ],\\n  },\\n];\\n\\nconst Demo = () => {\\n  const [value, setValue] = useState([]);\\n  const [dataSource, setDataSource] = useState([]);\\n  const [wheelDefaultValue, setWheelDefaultValue] = useState([]);\\n\\n  useEffect(() => {\\n    setTimeout(() => {\\n      setDataSource(CASCADE_DATA);\\n      setWheelDefaultValue(['1', '12']);\\n    }, 0);\\n  }, []);\\n\\n  return (\\n    <Cell title=\\\"城市\\\">\\n      <Select\\n        value={value}\\n        wheelDefaultValue={wheelDefaultValue}\\n        dataSource={dataSource}\\n        onOk={(selected) => {\\n          console.log('Select onOk: ', selected);\\n          setValue(selected.map((item) => item.value));\\n        }}\\n      />\\n    </Cell>\\n  );\\n};\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n## PickerView 平铺选择器\\n\\n```jsx\\nimport { useState, useEffect } from 'react';\\nimport { PickerView } from 'zarm';\\n\\n// 级联数据\\nconst CASCADE_DATA = [\\n  {\\n    code: '1',\\n    label: '北京市',\\n    children: [\\n      { code: '11', label: '海淀区' },\\n      { code: '12', label: '西城区' },\\n    ],\\n  },\\n  {\\n    code: '2',\\n    label: '上海市',\\n    children: [\\n      { code: '21', label: '杨浦区' },\\n      { code: '22', label: '静安区' },\\n    ],\\n  },\\n];\\n\\nconst Demo = () => {\\n  const [value, setValue] = useState([]);\\n  const [dataSource, setDataSource] = useState([]);\\n  const [valueMember, setValueMember] = useState([]);\\n\\n  useEffect(() => {\\n    setTimeout(() => {\\n      setValue(['1', '12']);\\n      setValueMember('code');\\n      setDataSource(CASCADE_DATA);\\n    }, 0);\\n  }, []);\\n\\n  return (\\n    <PickerView\\n      value={value}\\n      valueMember={valueMember}\\n      dataSource={dataSource}\\n      onChange={(selected) => {\\n        console.log('PickerView onChange: ', selected);\\n        setValue(selected.map((item) => item.code));\\n      }}\\n    />\\n  );\\n};\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n## API\\n\\n| 属性              | 类型                                                                                                            | 默认值               | 说明                   |\\n| :---------------- | :-------------------------------------------------------------------------------------------------------------- | :------------------- | :--------------------- |\\n| dataSource        | DataSource<T = { label: string; value: string \\\\| number \\\\| boolean }> = Array<T & { children?: DataSource<T> }> | []                   | 数据源                 |\\n| value             | string \\\\| number \\\\| boolean \\\\| Array<string &#124; number &#124; boolean>                                       | -                    | 值                     |\\n| defaultValue      | string \\\\| number \\\\| boolean \\\\| Array<string &#124; number &#124; boolean>                                       | -                    | 初始值                 |\\n| wheelDefaultValue | string \\\\| number \\\\| boolean \\\\| Array<string &#124; number &#124; boolean>                                       | -                    | 滚轮初始停留的位置     |\\n| valueMember       | string                                                                                                          | 'value'              | 值字段对应的 key       |\\n| itemRender        | (data?: { [key: string]: string &#124; number &#124; boolean }) => ReactNode                                    | (data) => data.label | 单个选项的展示         |\\n| disabled          | boolean                                                                                                         | false                | 是否禁用               |\\n| cols              | number                                                                                                          | Infinity             | 级联选择器的级数       |\\n| onChange          | (selected?: Array<{ [key: string]: string &#124; number &#124; boolean }>) => void                              | -                    | 值变化时触发的回调函数 |\\n\\n### 仅 Picker & Select 支持的属性\\n\\n| 属性           | 类型                                                                               | 默认值        | 说明                                           |\\n| :------------- | :--------------------------------------------------------------------------------- | :------------ | :--------------------------------------------- |\\n| title          | string                                                                             | '请选择'      | 选择器标题                                     |\\n| okText         | string                                                                             | '确定'        | 确定栏文字                                     |\\n| cancelText     | string                                                                             | '取消'        | 取消栏文字                                     |\\n| maskClosable   | boolean                                                                            | true          | 是否点击遮罩层时关闭，需要和 onCancel 一起使用 |\\n| destroy        | boolean                                                                            | false         | 弹层关闭后是否移除节点                         |\\n| onOk           | (selected?: Array<{ [key: string]: string &#124; number &#124; boolean }>) => void | -             | 点击确定时触发的回调函数                       |\\n| onCancel       | () => void                                                                         | -             | 点击取消时触发的回调函数                       |\\n| mountContainer | HTMLElement &#124; () => HTMLElement                                               | document.body | 指定 Picker 挂载的 HTML 节点                   |\\n\\n### 仅 Picker 支持的属性\\n\\n| 属性    | 类型    | 默认值 | 说明     |\\n| :------ | :------ | :----- | :------- |\\n| visible | boolean | false  | 是否展示 |\\n\\n### 仅 Select 支持的属性\\n\\n| 属性          | 类型                                                                                    | 默认值                                       | 说明         |\\n| :------------ | :-------------------------------------------------------------------------------------- | :------------------------------------------- | :----------- |\\n| placeholder   | string                                                                                  | '请选择'                                     | 输入提示信息 |\\n| hasArrow      | boolean                                                                                 | true                                         | 是否显示箭头 |\\n| displayRender | (selected?: Array<{ [key: string]: string &#124; number &#124; boolean }>) => ReactNode | selected => selected.map(item => item.label) | 所选值的展示 |\\n\";"],"sourceRoot":""}