{"version":3,"file":"js/1879.65b6af1c.js","mappings":"0GAAA,wiV","sources":["webpack://site/../zarm/src/radio/demo.md"],"sourcesContent":["export default \"# Radio 复选框\\n\\n## 基本用法\\n\\n```jsx\\nimport { List, Radio } from 'zarm';\\nimport { Star, StarFill } from '@zarm-design/icons';\\n\\nReactDOM.render(\\n  <List>\\n    <List.Item>\\n      <Radio>普通</Radio>\\n    </List.Item>\\n    <List.Item>\\n      <Radio defaultChecked>默认选中</Radio>\\n    </List.Item>\\n    <List.Item>\\n      <Radio disabled>禁用</Radio>\\n    </List.Item>\\n    <List.Item>\\n      <Radio defaultChecked disabled>\\n        选中且禁用\\n      </Radio>\\n    </List.Item>\\n  </List>,\\n  mountNode,\\n);\\n```\\n\\n## 组合使用\\n\\n```jsx\\nimport { useState } from 'react';\\nimport { List, Radio } from 'zarm';\\n\\nconst Demo = () => {\\n  const [value, setValue] = useState([]);\\n\\n  const onChange = (value) => {\\n    console.log('onChange', value);\\n    setValue(value);\\n  };\\n\\n  return (\\n    <List>\\n      <List.Item>\\n        <Radio.Group value={value} onChange={onChange}>\\n          <Radio value=\\\"0\\\">选项一</Radio>\\n          <Radio value=\\\"1\\\">选项二</Radio>\\n          <Radio value=\\\"2\\\">选项三</Radio>\\n        </Radio.Group>\\n      </List.Item>\\n    </List>\\n  );\\n};\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n## 禁用\\n\\n```jsx\\nimport { List, Radio } from 'zarm';\\n\\nReactDOM.render(\\n  <List>\\n    <List.Item>\\n      <Radio.Group disabled>\\n        <Radio value=\\\"0\\\">选项一</Radio>\\n        <Radio value=\\\"1\\\">选项二</Radio>\\n        <Radio value=\\\"2\\\">选项三</Radio>\\n      </Radio.Group>\\n    </List.Item>\\n  </List>,\\n  mountNode,\\n);\\n```\\n\\n## 通栏样式\\n\\n```jsx\\nimport { List, Radio } from 'zarm';\\n\\nReactDOM.render(\\n  <List>\\n    <List.Item>\\n      <Radio.Group block>\\n        <Radio value=\\\"0\\\">选项一</Radio>\\n        <Radio value=\\\"1\\\">选项二</Radio>\\n      </Radio.Group>\\n    </List.Item>\\n  </List>,\\n  mountNode,\\n);\\n```\\n\\n## 按钮样式\\n\\n```jsx\\nimport { Radio, List } from 'zarm';\\n\\nReactDOM.render(\\n  <List>\\n    <List.Item title=\\\"普通\\\">\\n      <Radio.Group type=\\\"button\\\">\\n        <Radio value=\\\"0\\\">选项一</Radio>\\n        <Radio value=\\\"1\\\">选项二</Radio>\\n        <Radio value=\\\"2\\\">选项三</Radio>\\n      </Radio.Group>\\n    </List.Item>\\n    <List.Item title=\\\"禁用\\\">\\n      <Radio.Group type=\\\"button\\\" disabled>\\n        <Radio value=\\\"0\\\">选项一</Radio>\\n        <Radio value=\\\"1\\\">选项二</Radio>\\n        <Radio value=\\\"2\\\">选项三</Radio>\\n      </Radio.Group>\\n    </List.Item>\\n    <List.Item title=\\\"通栏\\\">\\n      <Radio.Group type=\\\"button\\\" block>\\n        <Radio value=\\\"0\\\">选项一</Radio>\\n        <Radio value=\\\"1\\\">选项二</Radio>\\n        <Radio value=\\\"2\\\">选项三</Radio>\\n      </Radio.Group>\\n    </List.Item>\\n    <List.Item title=\\\"紧凑\\\">\\n      <Radio.Group type=\\\"button\\\" compact>\\n        <Radio value=\\\"0\\\">选项一</Radio>\\n        <Radio value=\\\"1\\\">选项二</Radio>\\n        <Radio value=\\\"2\\\">选项三</Radio>\\n      </Radio.Group>\\n    </List.Item>\\n  </List>,\\n  mountNode,\\n);\\n```\\n\\n## 列表样式\\n\\n```jsx\\nimport { Radio } from 'zarm';\\nimport { Star, StarFill } from '@zarm-design/icons';\\n\\nReactDOM.render(\\n  <Radio.Group type=\\\"list\\\">\\n    <Radio value=\\\"0\\\">选项一</Radio>\\n    <Radio value=\\\"1\\\">选项二</Radio>\\n    <Radio value=\\\"2\\\" disabled>\\n      选项三（禁止选择）\\n    </Radio>\\n  </Radio.Group>,\\n  mountNode,\\n);\\n```\\n\\n## 列表样式（尾部图标）\\n\\n```jsx\\nimport { Radio } from 'zarm';\\n\\nReactDOM.render(\\n  <Radio.Group type=\\\"list\\\" listIconAlign=\\\"after\\\">\\n    <Radio value=\\\"0\\\">选项一</Radio>\\n    <Radio value=\\\"1\\\">选项二</Radio>\\n    <Radio value=\\\"2\\\" disabled>\\n      选项三（禁止选择）\\n    </Radio>\\n  </Radio.Group>,\\n  mountNode,\\n);\\n```\\n\\n## 自定义图标\\n\\n```jsx\\nimport { List, Radio, Button } from 'zarm';\\nimport { Star, StarFill, CloseCircle, CloseCircleFill, Close, Success } from '@zarm-design/icons';\\n\\nReactDOM.render(\\n  <List>\\n    <List.Item>\\n      <Radio.Group>\\n        <Radio\\n          value=\\\"0\\\"\\n          renderIcon={({ checked }) =>\\n            checked ? <Success theme=\\\"primary\\\" /> : <Close theme=\\\"danger\\\" />\\n          }\\n        >\\n          选项一\\n        </Radio>\\n        <Radio\\n          value=\\\"1\\\"\\n          renderIcon={({ checked }) =>\\n            checked ? <StarFill theme=\\\"primary\\\" /> : <Star theme=\\\"primary\\\" />\\n          }\\n        >\\n          选项二\\n        </Radio>\\n        <Radio value=\\\"2\\\">选项三</Radio>\\n      </Radio.Group>\\n    </List.Item>\\n  </List>,\\n  mountNode,\\n);\\n```\\n\\n## 自定义样式\\n\\n```jsx\\nimport { useState, useRef } from 'react';\\nimport { List, Radio } from 'zarm';\\nimport { Success } from '@zarm-design/icons';\\n\\nconst items = ['选项一', '选项二', '选项三'];\\n\\nconst Demo = () => {\\n  const [value, setValue] = useState(['0']);\\n\\n  const onChange = (value) => {\\n    console.log('onChange', value);\\n    setValue(value);\\n  };\\n\\n  const CustomRadio = (props) => {\\n    const RadioRef = useRef();\\n\\n    return (\\n      <Radio\\n        ref={RadioRef}\\n        value={props.value}\\n        render={({ checked }) => (\\n          <div\\n            style={{\\n              position: 'relative',\\n              padding: '4px 8px',\\n              fontSize: 14,\\n              borderWidth: '1px',\\n              borderStyle: 'solid',\\n              borderColor: checked ? 'var(--za-theme-primary)' : 'var(--za-theme-default)',\\n            }}\\n            onClick={() => {\\n              RadioRef.current.check();\\n            }}\\n          >\\n            <span\\n              style={{\\n                display: checked ? 'inline-block' : 'none',\\n                position: 'absolute',\\n                right: 0,\\n                top: 0,\\n                fontSize: 0,\\n              }}\\n            >\\n              <Success style={{ fontSize: 10 }} theme=\\\"primary\\\" />\\n            </span>\\n            {props.label}\\n          </div>\\n        )}\\n      />\\n    );\\n  };\\n  return (\\n    <List>\\n      <List.Item>\\n        <Radio.Group\\n          value={value}\\n          onChange={onChange}\\n          style={{\\n            '--group-spacing-horizontal': '8px',\\n            '--group-spacing-vertical': '6px',\\n          }}\\n        >\\n          {items.map((item, index) => (\\n            <CustomRadio key={+index} value={String(index)} label={item} />\\n          ))}\\n        </Radio.Group>\\n      </List.Item>\\n    </List>\\n  );\\n};\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n## API\\n\\n### Radio\\n\\n| 属性           | 类型                                             | 默认值 | 说明                                                |\\n| :------------- | :----------------------------------------------- | :----- | :-------------------------------------------------- |\\n| disabled       | boolean                                          | false  | 是否禁用                                            |\\n| value          | string \\\\| number                             | -      | 值                                                  |\\n| checked        | boolean                                          | false  | 当前是否选中                                        |\\n| defaultChecked | boolean                                          | false  | 初始是否选中                                        |\\n| id             | string                                           | -      | 方便外部带有 for 属性的 label 标签控制当前 Radio |\\n| onChange       | (event: ChangeEvent\\\\<HTMLInputElement\\\\>) => void | -      | 值变化时触发的回调函数                              |\\n| renderIcon     | (props: number \\\\| string) => React.ReactNode        | -      | 自定义图标渲染函数                                  |\\n| render         | (props: number \\\\| string) => React.ReactNode        | -      | 自定义样式渲染函数                                  |\\n\\n### Radio.Group\\n\\n| 属性          | 类型                                   | 默认值   | 说明                                                |\\n| :------------ | :------------------------------------- | :------- | :-------------------------------------------------- |\\n| type          | string                                 | -        | 显示类型，可选值 `button`、`list`                   |\\n| value         | number \\\\| string                   | []       | 选中值                                              |\\n| defaultValue  | number \\\\| string                   | []       | 初始选中值                                          |\\n| disabled      | boolean                                | false    | 是否禁用                                            |\\n| block         | boolean                                | false    | 子项是否为块级元素                                  |\\n| compact   | boolean                           | false    | 按钮类型时，是否为紧凑模式                                   |\\n| listIconAlign | string                                 | 'before' | type 为`list`时图标的位置，可选值 `before`、`after` |\\n| onChange      | (values: number \\\\| string) => void | -        | 值变化时触发的回调函数                              |\\n\\n## CSS 变量\\n\\n### Radio\\n\\n| 属性                         | 默认值                                       | 说明                 |\\n| :--------------------------- | :------------------------------------------- | :------------------- |\\n| --icon-size                  | '22px'                                       | 图标大小             |\\n| --icon-background            | 'transparent'                                | 图标背景色           |\\n| --icon-border-radius         | '22px'                                       | 图标圆角大虾皮       |\\n| --icon-border-width          | '1px'                                        | 图标边框粗细         |\\n| --icon-border-color          | 'rgb(199, 199, 204)'                         | 图标边框颜色         |\\n| --tick-font-size             | '16px'                                       | 勾选标记大小         |\\n| --tick-color                 | '#fff'                                       | 勾选标记颜色         |\\n| --tick-transition            | 'all 0.2s cubic-bezier(.71, -0.46, .88, .6)' | 勾选标记动画效果     |\\n| --text-margin-horizontal     | '8px'                                        | 文字横向外边距       |\\n| --active-opacity             | 0.6                                          | 激活状态透明度       |\\n| --checked-icon-background    | 'var(--za-theme-primary)'                    | 选中状态图标背景色   |\\n| --checked-icon-border-color  | 'var(--za-theme-primary)'                    | 选中状态图标边框颜色 |\\n| --checked-tick-color         | 'var(--za-theme-primary)'                    | 选中状态勾选标记颜色 |\\n| --disabled-icon-background   | '#f2f2f2'                                    | 禁用状态图标背景色   |\\n| --disabled-icon-border-color | 'rgba(199, 199, 204, 0.7)'                   | 禁用状态图标边框颜色 |\\n| --disabled-text-color        | 'rgba(0, 0, 0, 0.3)'                         | 禁用状态文字颜色     |\\n| --disabled--tick-color       | '#bcbcbc'                                    | 禁用状态勾选标记颜色 |\\n\\n### Radio.Group\\n\\n| 属性                       | 默认值 | 说明                 |\\n| :------------------------- | :----- | :------------------- |\\n| --group-spacing-vertical   | '8px'  | 组合使用时的纵向间距 |\\n| --group-spacing-horizontal | '24px' | 组合使用时的横向间距 |\\n\\n## Radio 指令式 API\\n```js\\n// 选择\\nref.current.check();\\n```\\n\";"],"names":[],"sourceRoot":""}