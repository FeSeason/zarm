"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[2998],{52998:function(n,e,t){t.r(e),e.default="# ConfigProvider 全局配置\n\n## 基本用法\n\n```jsx\nimport { useState, useRef } from 'react';\nimport {\n  ConfigProvider,\n  List,\n  Button,\n  Modal,\n  Keyboard,\n  Radio,\n  Message,\n  TabBar,\n  Icon,\n  Popup,\n  Rate,\n  Switch,\n  SearchBar,\n} from 'zarm';\nimport enUS from 'zarm/lib/config-provider/locale/en_US';\nimport zhCN from 'zarm/lib/config-provider/locale/zh_CN';\n\nconst TabIcon = Icon.createFromIconfont(\n  '//lf1-cdn-tos.bytegoofy.com/obj/iconpark/svg_20337_14.627ee457cf7594fbbce6d5e14b8c29ef.js',\n);\n\nconst colors = ['#00bc70', '#1890ff', '#f5222d', '#fa541b', '#13c2c2', '#2f54ec', '#712fd1'];\n\nconst Demo = () => {\n  const containerRef = useRef();\n  const [visiblePopup, setVisiblePopup] = useState(false);\n\n  const [locale, setLocale] = useState(localStorage.locale || 'zhCN');\n  const [primaryColor, setPrimaryColor] = useState(localStorage.primaryColor || colors[0]);\n  const [theme, setTheme] = useState(localStorage.theme || 'light');\n  const [safeArea, setSafeArea] = useState(false);\n  const [mountContainer, setMountContainer] = useState(false);\n  const [cssVars, setCssVars] = useState(null);\n\n  return (\n    <>\n      <List>\n        <List.Item\n          title=\"切换语言\"\n          suffix={\n            <Radio.Group compact type=\"button\" value={locale} onChange={setLocale}>\n              <Radio value=\"zhCN\">中文</Radio>\n              <Radio value=\"enUS\">EN</Radio>\n            </Radio.Group>\n          }\n        />\n        <List.Item\n          title=\"切换品牌色\"\n          suffix={\n            <ul className=\"colors\">\n              {colors.map((color, index) => {\n                return (\n                  <li\n                    key={+index}\n                    style={{ backgroundColor: color }}\n                    onClick={() => setPrimaryColor(color)}\n                  />\n                );\n              })}\n            </ul>\n          }\n        />\n        <List.Item\n          title=\"切换主题\"\n          suffix={\n            <Radio.Group compact type=\"button\" value={theme} onChange={(value) => setTheme(value)}>\n              <Radio value=\"light\">默认主题</Radio>\n              <Radio value=\"dark\">暗黑主题</Radio>\n            </Radio.Group>\n          }\n        />\n        <List.Item\n          title=\"安全区域开启\"\n          suffix={<Switch checked={safeArea} onChange={setSafeArea} />}\n        />\n        <List.Item\n          title=\"自定义弹层渲染节点\"\n          suffix={<Switch checked={mountContainer} onChange={setMountContainer} />}\n        />\n        <List.Item\n          title=\"设置 CSS 变量\"\n          suffix={\n            <Button\n              size=\"xs\"\n              onClick={() => {\n                setCssVars(\n                  cssVars\n                    ? null\n                    : {\n                        '--za-theme-primary': '#ff0000',\n                        '--za-rate-active-color': '#fa541b',\n                      },\n                );\n              }}\n            >\n              {cssVars ? '还原' : '设置'}\n            </Button>\n          }\n        />\n      </List>\n\n      <Message theme=\"warning\">以下为组件示例</Message>\n\n      <ConfigProvider\n        locale={locale === 'enUS' ? enUS : zhCN}\n        primaryColor={primaryColor}\n        theme={theme}\n        safeArea={safeArea}\n        cssVars={cssVars}\n        mountContainer={!mountContainer ? document.body : containerRef.current}\n      >\n        <div>\n          <SearchBar />\n          <List>\n            <List.Item title={<Switch defaultChecked />} />\n            <List.Item title={<Rate defaultValue={3} />} />\n            <List.Item\n              title=\"确认框\"\n              suffix={\n                <Button\n                  size=\"xs\"\n                  onClick={() => {\n                    Modal.confirm({\n                      title: '确认信息',\n                      content: '你确定要这样做吗？',\n                      shape: 'radius',\n                    });\n                  }}\n                >\n                  开启\n                </Button>\n              }\n            />\n            <List.Item\n              title=\"弹出层\"\n              suffix={\n                <Button size=\"xs\" onClick={() => setVisiblePopup(true)}>\n                  开启\n                </Button>\n              }\n            />\n          </List>\n\n          <Popup\n            visible={visiblePopup}\n            direction=\"bottom\"\n            onMaskClick={() => setVisiblePopup(false)}\n            afterOpen={() => console.log('打开')}\n            afterClose={() => console.log('关闭')}\n          >\n            <div className=\"popup-box\">内容</div>\n          </Popup>\n\n          <TabBar defaultActiveKey=\"home\">\n            <TabBar.Item itemKey=\"home\" title=\"首页\" icon={<TabIcon type=\"home\" />} />\n            <TabBar.Item\n              itemKey=\"found\"\n              title=\"项目\"\n              icon={<TabIcon type=\"menu\" />}\n              badge={{ shape: 'circle', text: '3' }}\n            />\n            <TabBar.Item\n              itemKey=\"me\"\n              title=\"我的\"\n              icon={<TabIcon type=\"user\" />}\n              badge={{ shape: 'dot' }}\n            />\n          </TabBar>\n\n          <Button block theme=\"primary\">\n            Button\n          </Button>\n\n          <div ref={containerRef} />\n        </div>\n      </ConfigProvider>\n    </>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## API\n\n| 属性            | 类型            | 默认值              | 说明                                                                                                                                |\n| :-------------- | :-------------- | :------------------ | :---------------------------------------------------------------------------------------------------------------------------------- |\n| prefix          | string          | 'za'                | 组件类名前缀                                                                                                                        |\n| locale          | Object          | -                   | 语言包配置，默认为中文，语言包可到 [zarm/lib/config-provider/locale](https://unpkg.com/zarm/lib/config-provider/locale/) 目录下寻找 |\n| theme           | string          | 'light'             | 主题模式，'light' 为光明主题，'dark' 为暗黑主题的切换                                                                               |\n| primaryColor    | string          | '#00bc70'           | 品牌标准色                                                                                                                          |\n| safeArea        | boolean         | false               | 是否适配安全区域屏                                                                                                                  |\n| mountContainer  | MountContainer  | () => document.body | 弹层组件渲染节点                                                                                                                    |\n| scrollContainer | ScrollContainer | () => window        | 组件滚动监听容器点                                                                                                                  |\n| cssVars         | Object          | {}                  | 组件 CSS 变量设置                                                                                                                   |\n\n### MountContainer\n\n```ts\ntype MountContainer = HTMLElement | (() => HTMLElement) | undefined | null | false;\n```\n\n### ScrollContainer\n\n```ts\ntype ScrollContainer = (HTMLElement | Window) | (() => HTMLElement | Window) | undefined | null;\n```\n"}}]);