{"version":3,"file":"js/260.35b309a0.js","mappings":"yGAAA","sources":["webpack://site/../zarm/src/date-picker/demo.md"],"sourcesContent":["export default \"# DatePicker 日期选择器\\n\\n## 基本用法\\n\\n```jsx\\nimport { useRef, useReducer } from 'react';\\nimport { List, Button, DatePicker, Toast } from 'zarm';\\n\\nconst currentYear = new Date().getFullYear();\\nconst initialValue = {\\n  basic: {\\n    title: '选择日期',\\n  },\\n  range: {\\n    title: '自定义范围',\\n    props: {\\n      min: new Date(new Date().setFullYear(currentYear - 3)),\\n      max: new Date(new Date().setFullYear(currentYear + 3)),\\n    },\\n  },\\n  filter: {\\n    title: '自定义过滤规则',\\n    props: {\\n      filter: (type, { value }) => {\\n        if (type === 'day') return value % 5 === 0;\\n        return true;\\n      },\\n    },\\n  },\\n};\\n\\nconst reducer = (state, action) => {\\n  const { type, key, value } = action;\\n\\n  const item = state[key];\\n  const props = item?.props;\\n\\n  switch (type) {\\n    case 'visible':\\n      return {\\n        ...state,\\n        [key]: {\\n          ...item,\\n          props: {\\n            ...props,\\n            visible: !props?.visible,\\n          },\\n        },\\n      };\\n\\n    case 'value':\\n      return {\\n        ...state,\\n        [key]: {\\n          ...item,\\n          props: {\\n            ...props,\\n            value,\\n          },\\n        },\\n      };\\n\\n    default:\\n  }\\n};\\n\\nconst Demo = () => {\\n  const [state, dispatch] = useReducer(reducer, initialValue);\\n\\n  const setValue = (key, value) => {\\n    dispatch({ type: 'value', key, value });\\n  };\\n\\n  const toggle = (key) => {\\n    dispatch({\\n      type: 'visible',\\n      key,\\n    });\\n  };\\n\\n  return (\\n    <List>\\n      {Object.entries(state).map(([key, item], index) => (\\n        <div key={key}>\\n          <List.Item\\n            title={item.title}\\n            suffix={\\n              <Button size=\\\"xs\\\" onClick={() => toggle(key)}>\\n                选择\\n              </Button>\\n            }\\n          />\\n          <DatePicker\\n            {...item.props}\\n            onChange={(value, items) => console.log('DatePicker onChange', key, value, items)}\\n            onConfirm={(value, items) => {\\n              setValue(key, value);\\n              toggle(key);\\n              Toast.show(value.toLocaleString());\\n              console.log('DatePicker onConfirm', key, value, items);\\n            }}\\n            onCancel={() => toggle(key)}\\n          />\\n        </div>\\n      ))}\\n    </List>\\n  );\\n};\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n## 日期类型\\n\\n```jsx\\nimport { useRef, useReducer } from 'react';\\nimport { List, Button, DatePicker, Toast } from 'zarm';\\n\\nconst currentYear = new Date().getFullYear();\\nconst initialValue = {\\n  year: {\\n    title: '年',\\n    props: {\\n      columnType: ['year'],\\n    },\\n  },\\n  yearMonth: {\\n    title: '年月',\\n    props: {\\n      columnType: ['year', 'month'],\\n    },\\n  },\\n  month: {\\n    title: '月',\\n    props: {\\n      columnType: ['month'],\\n    },\\n  },\\n  week: {\\n    title: '周',\\n    props: {\\n      columnType: ['year', 'week'],\\n    },\\n  },\\n  date: {\\n    title: '日期',\\n  },\\n  time: {\\n    title: '时间',\\n    props: {\\n      columnType: ['hour', 'minute', 'second'],\\n      value: new Date(new Date().setHours(0, 0, 0)),\\n    },\\n  },\\n  datetime: {\\n    title: '日期时间',\\n    props: {\\n      columnType: ['year', 'month', 'day', 'hour', 'minute'],\\n    },\\n  },\\n  datetime: {\\n    title: '12小时制',\\n    props: {\\n      columnType: ['meridiem', 'hour', 'minute'],\\n    },\\n  },\\n};\\n\\nconst reducer = (state, action) => {\\n  const { type, key, value } = action;\\n\\n  const item = state[key];\\n  const props = item?.props;\\n\\n  switch (type) {\\n    case 'visible':\\n      return {\\n        ...state,\\n        [key]: {\\n          ...item,\\n          props: {\\n            ...props,\\n            visible: !props?.visible,\\n          },\\n        },\\n      };\\n\\n    case 'value':\\n      return {\\n        ...state,\\n        [key]: {\\n          ...item,\\n          props: {\\n            ...props,\\n            value,\\n          },\\n        },\\n      };\\n\\n    default:\\n  }\\n};\\n\\nconst Demo = () => {\\n  const [state, dispatch] = useReducer(reducer, initialValue);\\n\\n  const setValue = (key, value) => {\\n    dispatch({ type: 'value', key, value });\\n  };\\n\\n  const toggle = (key) => {\\n    dispatch({\\n      type: 'visible',\\n      key,\\n    });\\n  };\\n\\n  return (\\n    <List>\\n      {Object.entries(state).map(([key, item], index) => (\\n        <div key={key}>\\n          <List.Item\\n            title={item.title}\\n            suffix={\\n              <Button size=\\\"xs\\\" onClick={() => toggle(key)}>\\n                选择\\n              </Button>\\n            }\\n          />\\n          <DatePicker\\n            {...item.props}\\n            onChange={(value, items) => console.log('DatePicker onChange', key, value, items)}\\n            onConfirm={(value, items) => {\\n              setValue(key, value);\\n              toggle(key);\\n              Toast.show(value.toLocaleString());\\n              console.log('DatePicker onConfirm', key, value, items);\\n            }}\\n            onCancel={() => toggle(key)}\\n          />\\n        </div>\\n      ))}\\n    </List>\\n  );\\n};\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n## DateSelect 表单日期选择器\\n\\n```jsx\\nimport { useState } from 'react';\\nimport { Toast, List, DateSelect } from 'zarm';\\n\\nconst Demo = () => {\\n  return (\\n    <List>\\n      <List.Item title=\\\"日期选择\\\">\\n        <DateSelect\\n          onChange={(value, items) => console.log('DateSelect onChange', value, items)}\\n          onConfirm={(value, items) => {\\n            Toast.show(value.toLocaleString());\\n            console.log('DateSelect onConfirm', value, items);\\n          }}\\n          filter={(type, { value }) => {\\n            if (type === 'day') return value % 5 === 0;\\n            return true;\\n          }}\\n        />\\n      </List.Item>\\n    </List>\\n  );\\n};\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n## 指令式调用\\n\\n```jsx\\nimport { useState } from 'react';\\nimport { DatePicker, List, Button, Toast } from 'zarm';\\n\\nconst Demo = () => {\\n  const [value, setValue] = useState();\\n\\n  return (\\n    <>\\n      <List>\\n        <List.Item\\n          title=\\\"选择日期\\\"\\n          suffix={\\n            <Button\\n              size=\\\"xs\\\"\\n              onClick={async () => {\\n                const { value: changedValue } = await DatePicker.prompt({\\n                  value,\\n                });\\n                if (!changedValue) return;\\n                setValue(changedValue);\\n                console.log(changedValue);\\n                Toast.show(JSON.stringify(changedValue));\\n              }}\\n            >\\n              选择\\n            </Button>\\n          }\\n        ></List.Item>\\n      </List>\\n    </>\\n  );\\n};\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n## DatePickerView 平铺选择器\\n\\n```jsx\\nimport { useState } from 'react';\\nimport { DatePickerView, List } from 'zarm';\\n\\nconst Demo = () => {\\n  return (\\n    <DatePickerView\\n      onChange={(value, items) => {\\n        console.log('DatePickerView', value, items);\\n      }}\\n    />\\n  );\\n};\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n## API\\n\\n| 属性         | 类型                                                                                                                                                | 默认值                   | 说明                   |\\n| :----------- | :-------------------------------------------------------------------------------------------------------------------------------------------------- | :----------------------- | :--------------------- |\\n| value        | Date                                                                                                                                                | -                        | 值                     |\\n| defaultValue | Date                                                                                                                                                | -                        | 初始值                 |\\n| columnType   | ('year' \\\\| 'month' \\\\| 'day' \\\\| 'meridiem' \\\\| 'hour' \\\\| 'minute' \\\\| 'second' \\\\| 'week' \\\\| 'week-day')[]                                              | ['year', 'month', 'day'] | 指定列选择类型         |\\n| min          | Date                                                                                                                                                | -                        | 相应 mode 的最小时间   |\\n| max          | Date                                                                                                                                                | -                        | 相应 mode 的最大时间   |\\n| disabled     | boolean                                                                                                                                             | false                    | 是否禁用               |\\n| filter       | (type: 'year' \\\\| 'month' \\\\| 'day' \\\\| 'meridiem' \\\\| 'hour' \\\\| 'minute' \\\\| 'second' \\\\| 'week' \\\\| 'week-day', {value: number, date: Date} ) => boolean | -                        | 选项过滤函数           |\\n| renderLabel  | (type: 'year' \\\\| 'month' \\\\| 'day' \\\\| 'meridiem' \\\\| 'hour' \\\\| 'minute' \\\\| 'second' \\\\| 'week' \\\\| 'week-day', value: number) => React.ReactNode        | -                        | 单个选项的展示         |\\n| onChange     | (value: Date) => void                                                                                                                               | -                        | 值变化时触发的回调函数 |\\n\\n### 指令式调用\\n\\nDatePicker 支持指令式调用，提供了 `prompt` 方法\\n\\n```tsx\\nprompt: (props: Omit<DatePickerProps, 'visible' | 'visible' | 'children'>) =>\\n  Promise<DatePickerValue[] | null>;\\n```\\n\\n`prompt` 方法的返回值是一个 Promise，如果用户点击了确定，从 Promise 中可以解析到 `DatePickerValue[]`，而如果用户是触发的取消操作，那么 Promise 中的值是 `null`。你可以通过 `await` 或 `.then()` 来获取到其中的值：\\n\\n```tsx\\nconst value = await DatePicker.prompt();\\n\\nDatePicker.prompt().then((value) => {\\n  // ...\\n});\\n```\\n\\n### 仅 DatePicker & DateSelect 支持的属性\\n\\n| 属性              | 类型                            | 默认值              | 说明                                           |\\n| :---------------- | :------------------------------ | :------------------ | :--------------------------------------------- |\\n| visible           | boolean                         | false               | 是否展示                                       |\\n| title             | string                          | '请选择'            | 选择器标题                                     |\\n| cancelText        | string                          | '取消'              | 取消栏文字                                     |\\n| confirmText       | string                          | '确定'              | 确定栏文字                                     |\\n| maskClosable      | boolean                         | true                | 是否点击遮罩层时关闭，需要和 onCancel 一起使用 |\\n| wheelDefaultValue | string \\\\| Date                  | -                   | 滚轮默认停留的日期位置                         |\\n| onConfirm         | (value: Date \\\\| string) => void | -                   | 点击确定时触发的回调函数                       |\\n| onCancel          | () => void                      | -                   | 点击取消时触发的回调函数                       |\\n| mountContainer    | MountContainer                  | () => document.body | 指定 DatePicker 挂载的 HTML 节点               |\\n\\n### 仅 DateSelect 支持的属性\\n\\n| 属性        | 类型   | 默认值   | 说明         |\\n| :---------- | :----- | :------- | :----------- |\\n| placeholder | string | '请选择' | 输入提示信息 |\\n\\n### ColumnType\\n\\nyear | month | day | meridiem | hour | minute | second | week | week-day\\n\\n## DatePicker CSS 变量\\n\\n| 属性                                | 默认值                          | 说明                 |\\n| :---------------------------------- | :------------------------------ | :------------------- |\\n| --header-height                     | '45px'                          | 头部高度             |\\n| --header-font-size                  | '16px'                          | 头部文字大小         |\\n| --header-background                 | '#f7f7f7'                       | 头部背景             |\\n| --header-title-text-color           | 'var(--za-color-text)'          | 头部标题文字颜色     |\\n| --header-submit-text-color          | 'var(--za-theme-primary)'       | 头部提交按钮文字颜色 |\\n| --header-cancel-text-color          | 'var(--za-color-text-caption)'  | 头部取消按钮文字颜色 |\\n| --content-background                | '#fff'                          | 内容区域背景         |\\n| --content-padding                   | '16px'                          | 内容区域内边距       |\\n| --content-mask-start-background     | 'rgba(255, 255, 255, 0.4)'      | 内容区域头部蒙层背景 |\\n| --content-mask-end-background       | 'rgba(255, 255, 255, 0.8)'      | 内容区域底部蒙层背景 |\\n| --wheel-item-rows                   | 5                               | 滚轮元素长度         |\\n| --wheel-item-height                 | '34px'                          | 滚轮元素高度         |\\n| --wheel-item-font-size              | '20px'                          | 滚轮元素文字大小     |\\n| --wheel-item-text-color             | 'var(--za-color-text)'          | 滚轮元素文字颜色     |\\n| --wheel-item-disabled-text-color    | 'var(--za-color-text-disabled)' | 滚轮元素文字禁用颜色 |\\n| --wheel-item-selected-background    | 'rgba(116, 116, 128, 0.08)'     | 滚轮元素文字选中背景 |\\n| --wheel-item-selected-border-radius | '7px'                           | 滚轮元素文字选中圆角 |\\n\\n## DateSelect CSS 变量\\n\\n| 属性                | 默认值                             | 说明               |\\n| :------------------ | :--------------------------------- | :----------------- |\\n| --header-height     | '45px'                             | 头部高度           |\\n| --height            | '28px'                             | 输入框高度         |\\n| --disabled-color    | 'var(--za-color-text-disabled)'    | 输入框禁用文字颜色 |\\n| --placeholder-color | 'var(--za-color-text-placeholder)' | 输入框占位文字颜色 |\\n| --arrow-color       | 'var(--za-arrow-color)'            | 输入框箭头         |\\n| --arrow-size        | 'var(--za-arrow-size)'             | 输入框箭头尺寸     |\\n| --arrow-width       | 'var(--za-arrow-width)'            | 输入框箭头宽度     |\\n\\n## DatePickerView CSS 变量\\n\\n| 属性                                | 默认值                          | 说明                 |\\n| :---------------------------------- | :------------------------------ | :------------------- |\\n| --background                        | '#fff'                          | 内容区域背景         |\\n| --padding                           | '16px'                          | 内容区域内边距       |\\n| --mask-start-background             | 'rgba(255, 255, 255, 0.4)'      | 内容区域头部蒙层背景 |\\n| --mask-end-background               | 'rgba(255, 255, 255, 0.8)'      | 内容区域底部蒙层背景 |\\n| --wheel-item-rows                   | 5                               | 滚轮元素长度         |\\n| --wheel-item-height                 | '34px'                          | 滚轮元素高度         |\\n| --wheel-item-font-size              | '20px'                          | 滚轮元素文字大小     |\\n| --wheel-item-text-color             | 'var(--za-color-text)'          | 滚轮元素文字颜色     |\\n| --wheel-item-disabled-text-color    | 'var(--za-color-text-disabled)' | 滚轮元素文字禁用颜色 |\\n| --wheel-item-selected-background    | 'rgba(116, 116, 128, 0.08)'     | 滚轮元素文字选中背景 |\\n| --wheel-item-selected-border-radius | '7px'                           | 滚轮元素文字选中圆角 |\\n\";"],"names":[],"sourceRoot":""}