"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[7038],{77038:function(n,e,t){t.r(e),e.default="# useScroll 滚动\n\n## 基本用法\n\n```jsx\nimport { useRef, useState } from 'react';\nimport { useScroll, List, Message } from 'zarm';\nimport { WarningCircle } from '@zarm-design/icons';\n\nconst Demo = () => {\n  const list = [];\n  for (let i = 0; i < 100; i++) list.push(<List.Item key={+i} title={`第 ${i + 1} 行`} />);\n  const [scrollTop, setScrollTop] = useState(0);\n\n  const containerRef = useRef();\n\n  useScroll({\n    container: containerRef,\n    onScroll: (e) => {\n      setScrollTop(e.target.scrollTop);\n    },\n  });\n\n  return (\n    <>\n      <Message theme=\"warning\" icon={<WarningCircle />}>\n        当前 scrollTop：{scrollTop}\n      </Message>\n      <div\n        ref={containerRef}\n        style={{\n          overflowY: 'auto',\n          maxHeight: 400,\n        }}\n      >\n        <List>{list}</List>\n      </div>\n    </>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## API\n\n| 属性      | 类型                                                  | 默认值 | 说明                 |\n| :-------- | :---------------------------------------------------- | :----- | :------------------- |\n| container | RefObject                                             | -      | 设置监听的滚动容器   |\n| onScroll  | (event: React.MouseEvent \\| React.TouchEvent) => void | -      | 滚动时触发的回调函数 |\n| wait      | number                                                | 200    | 需要节流的毫秒数     |\n"}}]);