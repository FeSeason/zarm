{"version":3,"file":"js/9163.e4a53a87.js","mappings":"0GAAA","sources":["webpack://site/../zarm/src/modal/demo.md"],"sourcesContent":["export default \"# Modal 模态框\\n\\n## 基本用法\\n\\n```jsx\\nimport { useRef, useReducer } from 'react';\\nimport { Modal, List, Button, Select } from 'zarm';\\n\\nconst initState = {\\n  normal: {\\n    visible: false,\\n  },\\n  hasFooter: {\\n    visible: false,\\n  },\\n  closable: {\\n    visible: false,\\n  },\\n  onlyBody: {\\n    visible: false,\\n  },\\n  animation: {\\n    visible: false,\\n    animationType: 'fade',\\n  },\\n  customContainer: {\\n    visible: false,\\n  },\\n};\\n\\nconst reducer = (state, action) => {\\n  const { type, key, animationType } = action;\\n\\n  switch (type) {\\n    case 'visible':\\n      return {\\n        ...state,\\n        [key]: {\\n          ...state[key],\\n          visible: !state[key].visible,\\n        },\\n      };\\n\\n    case 'animation':\\n      return {\\n        ...state,\\n        [key]: {\\n          ...state[key],\\n          animationType,\\n        },\\n      };\\n\\n    default:\\n  }\\n};\\n\\nconst Demo = () => {\\n  const myRef = useRef();\\n  const [state, dispatch] = useReducer(reducer, initState);\\n\\n  const toggle = (key) => dispatch({ type: 'visible', key });\\n\\n  return (\\n    <>\\n      <List>\\n        <List.Item\\n          title=\\\"普通\\\"\\n          suffix={\\n            <Button size=\\\"xs\\\" onClick={() => toggle('normal')}>\\n              开启\\n            </Button>\\n          }\\n        />\\n        <List.Item\\n          title=\\\"自定义底部\\\"\\n          suffix={\\n            <Button size=\\\"xs\\\" onClick={() => toggle('hasFooter')}>\\n              开启\\n            </Button>\\n          }\\n        />\\n        <List.Item\\n          title=\\\"遮罩层可关闭\\\"\\n          suffix={\\n            <Button size=\\\"xs\\\" onClick={() => toggle('closable')}>\\n              开启\\n            </Button>\\n          }\\n        />\\n        <List.Item\\n          title=\\\"无头部，无底部\\\"\\n          suffix={\\n            <Button size=\\\"xs\\\" onClick={() => toggle('onlyBody')}>\\n              开启\\n            </Button>\\n          }\\n        />\\n        <List.Item\\n          title=\\\"动画效果\\\"\\n          suffix={\\n            <Button size=\\\"xs\\\" onClick={() => toggle('animation')}>\\n              开启\\n            </Button>\\n          }\\n        >\\n          <Select\\n            value={state.animation.animationType}\\n            dataSource={[\\n              { value: 'fade', label: '淡出淡入效果' },\\n              { value: 'zoom', label: '缩放效果' },\\n              { value: 'rotate', label: '旋转效果' },\\n              { value: 'door', label: '开关门效果' },\\n              { value: 'flip', label: '翻转效果' },\\n              { value: 'move-up', label: '向上移入效果' },\\n              { value: 'move-down', label: '向下移入效果' },\\n              { value: 'move-left', label: '向左移入效果' },\\n              { value: 'move-right', label: '向右移入效果' },\\n              { value: 'slide-up', label: '向上滑入效果' },\\n              { value: 'slide-down', label: '向下滑入效果' },\\n              { value: 'slide-left', label: '向左滑入效果' },\\n              { value: 'slide-right', label: '向右滑入效果' },\\n            ]}\\n            itemRender={(data) => data && `${data.label}（${data.value}）`}\\n            displayRender={(selected) => selected.map((item) => item && item.label)}\\n            onConfirm={(selected) => {\\n              dispatch({\\n                type: 'animation',\\n                key: 'animation',\\n                animationType: selected[0],\\n              });\\n            }}\\n          />\\n        </List.Item>\\n        <List.Item\\n          suffix={\\n            <Button size=\\\"xs\\\" onClick={() => toggle('customContainer')}>\\n              开启\\n            </Button>\\n          }\\n        >\\n          挂载到指定 DOM 节点\\n        </List.Item>\\n      </List>\\n\\n      <div id=\\\"test-div\\\" style={{ position: 'relative', zIndex: 1 }} ref={myRef} />\\n\\n      <Modal visible={state.normal.visible} title=\\\"标题\\\" closable onClose={() => toggle('normal')}>\\n        模态框内容\\n      </Modal>\\n\\n      <Modal\\n        title=\\\"标题\\\"\\n        visible={state.hasFooter.visible}\\n        footer={\\n          <Button block shape=\\\"rect\\\" theme=\\\"primary\\\" onClick={() => toggle('hasFooter')}>\\n            确定\\n          </Button>\\n        }\\n      >\\n        模态框内容\\n      </Modal>\\n\\n      <Modal\\n        visible={state.closable.visible}\\n        title=\\\"标题\\\"\\n        maskClosable\\n        onClose={() => toggle('closable')}\\n      >\\n        点击遮罩层关闭\\n      </Modal>\\n\\n      <Modal visible={state.onlyBody.visible} maskClosable onClose={() => toggle('onlyBody')}>\\n        无头部，无底部\\n      </Modal>\\n\\n      <Modal\\n        visible={state.animation.visible}\\n        animationType={state.animation.animationType}\\n        maskClosable\\n        onClose={() => toggle('animation')}\\n      >\\n        <div style={{ height: 100 }}>\\n          当前使用的动画类型animationType：'{state.animation.animationType}'\\n        </div>\\n      </Modal>\\n\\n      <Modal\\n        visible={state.customContainer.visible}\\n        maskClosable\\n        onClose={() => toggle('customContainer')}\\n        mountContainer={() => myRef.current}\\n      >\\n        挂载到指定dom节点\\n      </Modal>\\n    </>\\n  );\\n};\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n## 带操作按钮\\n\\n```jsx\\nimport { useState } from 'react';\\nimport { Modal, List, Button } from 'zarm';\\n\\nconst Demo = () => {\\n  const [visible, setVisible] = useState(false);\\n  const toggle = () => setVisible(!visible);\\n\\n  return (\\n    <>\\n      <List>\\n        <List.Item\\n          title=\\\"自定义操作按钮\\\"\\n          suffix={\\n            <Button size=\\\"xs\\\" onClick={toggle}>\\n              开启\\n            </Button>\\n          }\\n        />\\n      </List>\\n\\n      <Modal\\n        visible={visible}\\n        title=\\\"标题\\\"\\n        actions={[\\n          {\\n            key: 'online',\\n            text: '在线阅读',\\n            theme: 'default',\\n          },\\n          {\\n            key: 'download',\\n            text: '下载文件',\\n            theme: 'default',\\n            disabled: true,\\n          },\\n          [\\n            {\\n              key: 'cancel',\\n              text: '取消',\\n            },\\n            {\\n              key: 'delete',\\n              text: '删除',\\n              bold: true,\\n              theme: 'danger',\\n            },\\n          ],\\n        ]}\\n        onAction={async (action) => {\\n          switch (action.key) {\\n            case 'cancel':\\n              toggle();\\n              break;\\n            default:\\n              // 模拟异步操作\\n              await new Promise((resolve) => setTimeout(resolve, 3000));\\n              toggle();\\n          }\\n          console.log(action);\\n        }}\\n      >\\n        模态框内容\\n      </Modal>\\n    </>\\n  );\\n};\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n## 警告框 Alert\\n\\n```jsx\\nimport { List, Button, Modal, Toast } from 'zarm';\\n\\nconst Demo = () => {\\n  return (\\n    <List>\\n      <List.Item\\n        title=\\\"静态方法关闭\\\"\\n        suffix={\\n          <Button\\n            size=\\\"xs\\\"\\n            onClick={() => {\\n              Modal.alert({\\n                className: 'test',\\n                title: '警告框标题',\\n                content: '这里是警告框的内容部分',\\n                onConfirm: () => {\\n                  console.log('点击确认');\\n                },\\n              });\\n            }}\\n          >\\n            开启\\n          </Button>\\n        }\\n      />\\n      <List.Item\\n        title=\\\"使用 Promise 关闭\\\"\\n        suffix={\\n          <Button\\n            size=\\\"xs\\\"\\n            onClick={() => {\\n              Modal.alert({\\n                title: '警告框标题',\\n                content: '这里是警告框的内容部分，点击关闭按钮，将触发 Promise 关闭警告框',\\n                onConfirm: async () => {\\n                  await new Promise((resolve) => setTimeout(resolve, 3000));\\n                  Toast.show({ content: '提交成功' });\\n                },\\n              });\\n            }}\\n          >\\n            开启\\n          </Button>\\n        }\\n      />\\n    </List>\\n  );\\n};\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n## 确认框 Confirm\\n\\n```jsx\\nimport { List, Button, Modal, Toast } from 'zarm';\\n\\nconst Demo = () => {\\n  return (\\n    <List>\\n      <List.Item\\n        title=\\\"静态方法关闭\\\"\\n        suffix={\\n          <Button\\n            size=\\\"xs\\\"\\n            onClick={() => {\\n              Modal.confirm({\\n                title: '确认信息',\\n                content: '这里是确认框的内容部分',\\n                onCancel: () => {\\n                  console.log('点击cancel');\\n                },\\n                onConfirm: () => {\\n                  console.log('点击ok');\\n                },\\n              });\\n            }}\\n          >\\n            开启\\n          </Button>\\n        }\\n      />\\n      <List.Item\\n        title=\\\"使用 Promise 关闭\\\"\\n        suffix={\\n          <Button\\n            size=\\\"xs\\\"\\n            onClick={() => {\\n              Modal.confirm({\\n                title: '确定要删除吗？',\\n                content: '这里是确认框的内容部分，点击确定按钮，将触发 Promise 关闭确认框',\\n                onConfirm: async () => {\\n                  await new Promise((resolve) => setTimeout(resolve, 3000));\\n                  Toast.show({ content: '提交成功' });\\n                },\\n              });\\n            }}\\n          >\\n            开启\\n          </Button>\\n        }\\n      />\\n    </List>\\n  );\\n};\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n## API\\n\\n| 属性              | 类型                                                                 | 默认值              | 说明                                                                                                                                                              |\\n| :---------------- | :------------------------------------------------------------------- | :------------------ | :---------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| shape             | string                                                               | 'radius'            | 形状，可选值 `rect`、`radius`                                                                                                                                     |\\n| visible           | boolean                                                              | false               | 是否显示                                                                                                                                                          |\\n| animationType     | string                                                               | 'fade'              | 动画效果，可选值 `fade`, `door`, `flip`, `rotate`, `zoom`,`move-up`, `move-down`, `move-left`, `move-right`,`slide-up`, `slide-down`, `slide-left`, `slide-right` |\\n| animationDuration | number                                                               | 200                 | 动画执行时间（单位：毫秒）                                                                                                                                        |\\n| width             | string &#124; number                                                 | '70%'               | 宽度                                                                                                                                                              |\\n| mask              | boolean                                                              | true                | 是否展示遮罩层                                                                                                                                                    |\\n| maskType          | string                                                               | 'normal'            | 遮罩层的类型，可选值 `transparent`, `normal`                                                                                                                      |\\n| maskClosable      | boolean                                                              | false               | 是否点击遮罩层时关闭，需要和 onCancel 一起使用                                                                                                                    |\\n| closable          | boolean                                                              | false               | 右上角是否显示关闭按钮，需要和 onCancel 一起使用                                                                                                                  |\\n| onClose           | () => void                                                           | -                   | maskClosable 或 closable 为 true 时，点击遮罩或者右上角关闭按钮触发的函数                                                                                         |\\n| title             | ReactNode                                                            | -                   | 标题                                                                                                                                                              |\\n| footer            | ReactNode                                                            | -                   | 弹窗底部内容                                                                                                                                                      |\\n| actions           | (ModalActionProps \\\\| ModalActionProps[])[]                           | []                  | 操作按钮配置                                                                                                                                                      |\\n| onAction          | (action: ModalActionProps, index: number) => void \\\\| Promise\\\\<void\\\\> | -                   | 点击操作按钮后触发的函数                                                                                                                                          |\\n| destroy           | boolean                                                              | true                | 弹层关闭后是否移除节点                                                                                                                                            |\\n| afterOpen         | () => void                                                           | -                   | 模态框打开后的回调                                                                                                                                                |\\n| afterClose        | () => void                                                           | -                   | 模态框关闭后的回调                                                                                                                                                |\\n| mountContainer    | MountContainer                                                       | () => document.body | 指定 Modal 挂载的 HTML 节点                                                                                                                                       |\\n\\n### ModalActionProps 操作按钮属性\\n\\n| 属性     | 类型       | 默认值    | 说明                                            |\\n| :------- | :--------- | :-------- | :---------------------------------------------- |\\n| text     | ReactNode  | -         | 按钮文字                                        |\\n| theme    | string     | 'primary' | 按钮主题，可选值 `default`、`primary`、`danger` |\\n| disabled | boolean    | false     | 按钮是否禁用                                    |\\n| bold     | boolean    | false     | 是否加粗                                        |\\n| onClick  | () => void | -         | 按钮点击后触发的回调函数                        |\\n\\n## 指令式 API\\n\\n```tsx\\n// 显示警告框，不传 onCancel 也可关闭，如需做更多操作，参考下方 Confirm 的例子\\nconst alert = Modal.alert({\\n  title: '警告框标题',\\n  content: '这里是警告框的内容部分',\\n});\\n\\n// 显示确认框，若关闭时需要 Promise，onConfirm、onCancel 均支持 Promise\\nconst confirm = Modal.confirm({\\n  title: '确认框标题',\\n  content: '这里是确认框的内容部分，点击确定按钮，将触发 Promise 关闭确认框',\\n  onConfirm: () => {\\n    return fetch.get('xxx.api').then((res) => {\\n      if(res.code === 0) {\\n        return true; // 关闭弹窗\\n      } else {\\n        return false; // 阻止弹窗关闭\\n      }\\n    }).catch(...);\\n  }\\n});\\n\\n```\\n\\n| 属性        | 类型       | 默认值                        | 说明                                        |\\n| :---------- | :--------- | :---------------------------- | :------------------------------------------ |\\n| title       | ReactNode  | -                             | 弹出框的标题                                |\\n| content     | ReactNode  | -                             | 弹出框的内容                                |\\n| cancelText  | ReactNode  | '关闭'(Alert)/'取消'(Confirm) | 取消按钮的内容                              |\\n| confirmText | ReactNode  | '确定'                        | 确定按钮的内容                              |\\n| onConfirm   | () => void | -                             | 使用 confirm 方法时，点击“确定”后的回调函数 |\\n| onCancel    | () => void | -                             | 点击“关闭/取消”后的回调函数                 |\\n\\n## CSS 变量\\n\\n| 属性                             | 默认值                              | 说明                 |\\n| :------------------------------- | :---------------------------------- | :------------------- |\\n| --background                     | 'rgb(242, 242, 242)'                | 背景色               |\\n| --border-radius                  | '14px'                              | 圆角大小             |\\n| --shadow                         | '0 7px 21px var(--za-color-shadow)' | 阴影样式             |\\n| --title-font-size                | '17px'                              | 标题字体大小         |\\n| --title-font-weight              | 500                                 | 标题字体粗细         |\\n| --title-text-color               | 'var(--za-color-text)'              | 标题字体颜色         |\\n| --close-size                     | '20px'                              | 关闭图标字体大小     |\\n| --close-color                    | '#ccc'                              | 关闭图标颜色         |\\n| --close-active-color             | '#999'                              | 关闭图标激活状态颜色 |\\n| --body-font-size                 | '13px'                              | 内容字体大小         |\\n| --body-text-color                | 'var(--za-color-text)'              | 内容字体颜色         |\\n| --body-padding                   | '16px'                              | 内容内边距           |\\n| --button-background              | 'transparent'                       | 操作按钮背景       |\\n| --button-height                  | '44px'                              | 操作按钮高度         |\\n| --button-font-size               | '17px'                              | 操作按钮字体大小     |\\n| --button-font-weight             | 500                                 | 操作按钮字体粗细     |\\n| --button-text-color              | 'var(--za-theme-primary)'           | 操作按钮字体颜色     |\\n| --button-active-background | 'var(--za-background-active)'       | 操作按钮选中背景   |\\n| --button-disabled-opacity        | 'var(--za-opacity-disabled)'        | 操作按钮禁用状态时的透明度   |\\n\";"],"names":[],"sourceRoot":""}