"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[4605],{64605:function(n,e,t){t.r(e),e.default="# 从 v2 到 v3\n\n本文档将帮助你从 zarm 2.x 版本升级到 zarm 3.x\n\n## 组件重构与移除\n\n- 移除 Cell 组件，更名为 List\n- 移除 BackTop 组件，更名为 BackToTop\n- 移除 StackPicker 组件，移至 Cascader\n- 移除 Drag 组件\n- Loading 组件在 `3.0.0` 中废弃，移至 Toast.show({ icon: 'loading' }) 指令式调用\n- 移除 ActivityIndicator 组件，更名为 Loading\n\n## 组件 API 调整\n\n- 组件提示/确认框的确认文案 API 统一为 `confirmText`，`okText` 等类似 API 都会被替换。\n\n  - Modal.(alert|confirm)\n  - Picker\n  - DatePicker\n  - KeyboardPicker\n\n```diff\n  import { Picker } from 'zarm';\n\n  const App: React.FC = () => (\n    <Picker\n-     okText=\"确定\"\n+     confirmText=\"确定\"\n    />\n  );\n\n  export default App;\n```\n\n- 组件提示/确认框的确认文案 API 统一为 `onConfirm`，`onOk` 等类似 API 都会被替换。\n  - Modal.(alert|confirm)\n  - Picker\n  - DatePicker\n  - KeyboardPicker\n\n```diff\n  import { Picker } from 'zarm';\n\n  const App: React.FC = () => (\n    <Picker\n-     onOk={() => {}}\n+     onConfirm={() => {}}\n    />\n  );\n\n  export default App;\n```\n\n- 组件值字段映射 API 统一为 `fieldNames`，`valueMember` 等类似 API 都会被替换。\n\n  - Picker/PickerView/Picker.prompt\n  - Cascader/CascaderView/Cascader.prompt\n  - Select\n\n```diff\n  import { Picker } from 'zarm';\n\n  const App: React.FC = () => (\n    <Picker\n-     valueMember=\"code\"\n+     fieldNames={{ value: 'code' }}\n    />\n  );\n\n  export default App;\n```\n\n### Calendar\n\n移除 `multiple` 双选，调整为 mode 模式 `range`\n\n```diff\n  import { Calendar } from 'zarm';\n\n  const App: React.FC = () => (\n    <Calendar\n-     multiple\n+     mode=\"range\"\n    />\n  );\n\n  export default App;\n```\n\n### Checkbox.Group\n\n`type` 可选值调整为 `button`、`list`，以及 `size`、`shape`、`ghost` 属性增加 button 前缀\n\n```diff\n  import { Checkbox } from 'zarm';\n\n  const App: React.FC = () => (\n    <Checkbox.Group\n-     type=\"cell\"\n-     size=\"md\"\n-     shape=\"round\"\n-     ghost\n+     type=\"list\"\n+     buttonSize=\"md\"\n+     buttonShape=\"round\"\n+     buttonGhost\n    />\n  );\n\n  export default App;\n```\n\n### Input\n\n`onChange` 回调参数调整为 event\n\n```diff\n  import { Input } from 'zarm';\n\n  const App: React.FC = () => (\n    <Input\n-     onChange={(value) => console.log(value)}\n+     onChange={(event) => console.log(event.target.value)}\n    />\n  );\n\n  export default App;\n```\n\n### SearchBar\n\n`onChange` 回调参数调整为 event\n\n```diff\n  import { SearchBar } from 'zarm';\n\n  const App: React.FC = () => (\n    <SearchBar\n-     onChange={(value) => console.log(value)}\n+     onChange={(event) => console.log(event.target.value)}\n    />\n  );\n\n  export default App;\n```\n\n### Modal\n\n`animationType` 属性值调整为 kebab case 命名\n\n- moveUp 调整为 move-up\n- moveDown 调整为 move-down\n- moveLeft 调整为 move-left\n- moveRight 调整为 move-right\n- slideUp 调整为 slide-up\n- slideDown 调整为 slide-down\n- slideLeft 调整为 slide-left\n- slideRight 调整为 slide-right\n\n### Popper\n\n`animationType` 和 `direction` 属性值调整为 kebab case 命名\n\n- animationType\n  - zoomFade 调整为 zoom-fade\n  - menuSlide 调整为 menu-slide\n  - moveUp 调整为 move-up\n  - moveDown 调整为 move-down\n  - moveLeft 调整为 move-left\n  - moveRight 调整为 move-right\n  - slideUp 调整为 slide-up\n  - slideDown 调整为 slide-down\n  - slideLeft 调整为 slide-left\n  - slideRight 调整为 slide-right\n- direction\n  - topLeft 调整为 top-left\n  - topRight 调整为 top-right\n  - rightTop 调整为 right-top\n  - rightBottom 调整为 right-bottom\n  - bottomLeft 调整为 bottom-left\n  - bottomRight 调整为 bottom-right\n  - leftTop 调整为 left-top\n  - leftBottom 调整为 left-bottom\n\n### SwipeAction\n\n按钮配置 API 统一为 `leftActions/rightActions`，配置对象继承 Button 组件部分属性\n\n```diff\n  import { SwipeAction } from 'zarm';\n\n  const App: React.FC = () => (\n    <SwipeAction\n-     right={[\n-       <Button size=\"lg\" shape=\"rect\" theme=\"primary\" onClick={() => console.log('右按钮')}>\n-         右按钮\n-       </Button>\n-     ]}\n+     rightActions={[\n+       {\n+         text: '右按钮',\n+         onClick: () => console.log('右按钮')\n+       }\n+     ]}\n    />\n  );\n\n  export default App;\n```\n\n### Toast\n\n`stayTime` 调整为 `duration`\n\n```diff\n  import { Toast } from 'zarm';\n\n  const App: React.FC = () => {\n    return (\n      <button onClick={() => {\n        Toast.show({\n          content: '提交成功',\n-         stayTime: 2000,\n+         duration: 2000,\n        })\n      }}>\n        提交\n      </button>\n    );\n  };\n\n  export default App;\n```\n\n### Badge\n\n`theme` 移除，调整为 `css` 变量 `--color` 设置颜色\n\n```diff\n  import { Badge } from 'zarm';\n\n  const App: React.FC = () => {\n    return (\n      <Badge\n        shape=\"radius\"\n        text=\"new\"\n-       theme=\"danger\"\n+       style={{ '--color': '#00bc70' }}\n      />\n    );\n  };\n\n  export default App;\n```\n\n### Marquee\n\n`animationDuration` 和 `animationDelay` 调整为 `speed` 和 `delay`，移除 `loop` 属性\n\n```diff\n  import { Marquee } from 'zarm';\n\n  const App: React.FC = () => {\n    return (\n      <Marquee\n-       animationDuration={30000}\n-       animationDelay={2000}\n+       speed={30000}\n+       delay={2000}\n      >\n        我从右向左滚动\n      </Marquee>\n    );\n  };\n\n  export default App;\n```\n\n### SearchBar\n\n取消按钮调制为默认不展示，通过设置 `showCancel` 展示按钮\n\n```diff\n  import { SearchBar } from 'zarm';\n\n  const App: React.FC = () => {\n    return (\n      <SearchBar\n+       showCancel\n      />\n    );\n  };\n\n  export default App;\n```\n\n### DatePicker/DatePicker/DateSelect\n\n`value` / `defaultValue` / `min` / `max` 参数类型调整为 `Date`\n\n```diff\n  <DatePickerView\n-   value='2023-02-08'\n+   value={new Date('2023/02/08')}\n  />\n```\n\n移除 `mode` 属性，调整为通过 `columnType` 设置列选择类型\n\n```diff\n  <DatePickerView\n-   mode='time'\n+   columnType={['hour', 'minute', 'second']}\n  />\n```\n\n移除 `minuteStep` 属性，通过 `filter` 设置\n\n```diff\n  <DatePickerView\n    columnType={['hour', 'minute']}\n-   minuteStep={5}\n+   filter={(type, { value }) => {\n+     if (type === 'minute') return value % 5 === 0;\n+     return true;\n+   }}\n  />\n```\n\n- 移除 `format` 属性\n\n## 常见问题\n\n### 如何在已经使用 Zarm 2.x 的项目中 Zarm 3.0\n\n1. 安装 zarm 3.0\n\n```bash\n$ npm install zarm-v3@npm:zarm@next\n```\n\n2. 在 webpack.config.js 使用 babel-plugin-import 按需引入，配置 sass 变量\n\n```diff\n// webpack.config.js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(j|t)sx?$/,\n        exclude: /node_modules/,\n        use: [\n          {\n            loader: require.resolve('babel-loader'),\n            options: {\n              plugins: [\n+               [\n+                 'import',\n+                 {\n+                   libraryName: 'zarm-v3',\n+                   libraryDirectory: 'lib',\n+                   style: true,\n+                 },\n+                 'zarm-v3',\n+               ],\n              ],\n            },\n          },\n        ],\n      },\n      {\n        test: /\\.scss$/,\n        use: [\n          {\n            loader: 'style-loader'\n          },\n          {\n            loader: 'css-loader'\n          },\n          {\n            loader: 'postcss-loader'\n          },\n          {\n            loader: 'sass-loader'\n+           options: {\n+             sassOptions: {\n+               additionalData: '$prefixCls: \"za-v3\";'\n+             }\n+           }\n          }\n        ],\n  },\n};\n```\n\n4. 配置 ConfigProvider prefixCls\n\n```tsx\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Button, ConfigProvider } from 'zarm-v3';\n\nReactDOM.render(\n  <ConfigProvider prefixCls=\"zarm-v3\">\n    <Button theme=\"primary\">submit</Button>\n  </ConfigProvider>,\n);\n```\n\n## 遇到问题\n\n如果您在升级过程中遇到了问题，请到 [GitHub issues](https://github.com/ZhongAnTech/zarm/issues) 进行反馈。我们会尽快响应和相应改进这篇文档。\n"}}]);