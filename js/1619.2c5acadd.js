"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[1619],{41619:function(n,t,o){o.r(t),t.default="# Toast 轻提示\n\n## 基础用法\n\n```jsx\nimport { useState } from 'react';\nimport { Toast, List, Button } from 'zarm';\n\nconst Demo = () => {\n  return (\n    <>\n      <List>\n        <List.Item\n          title=\"普通\"\n          suffix={\n            <>\n              <Button\n                size=\"xs\"\n                onClick={() => {\n                  Toast.show('提示内容');\n                }}\n              >\n                开启\n              </Button>\n            </>\n          }\n        />\n      </List>\n    </>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## 带图标提示\n\n```jsx\nimport { useRef } from 'react';\nimport { Toast, List, Button } from 'zarm';\nimport { Warning } from '@zarm-design/icons';\n\nconst Demo = () => {\n  return (\n    <List>\n      <List.Item\n        title=\"加载中\"\n        suffix={\n          <Button\n            size=\"xs\"\n            onClick={() => {\n              Toast.show({\n                icon: 'loading',\n              });\n            }}\n            style={{ marginLeft: 12 }}\n          >\n            开启\n          </Button>\n        }\n      />\n      <List.Item\n        title=\"成功\"\n        suffix={\n          <Button\n            size=\"xs\"\n            onClick={() => {\n              Toast.show({\n                icon: 'success',\n                content: '预约成功',\n              });\n            }}\n          >\n            开启\n          </Button>\n        }\n      />\n      <List.Item\n        title=\"失败\"\n        suffix={\n          <Button\n            size=\"xs\"\n            onClick={() => {\n              Toast.show({\n                icon: 'fail',\n                content: '预约失败',\n              });\n            }}\n            style={{ marginLeft: 12 }}\n          >\n            开启\n          </Button>\n        }\n      />\n      <List.Item\n        title=\"自定义\"\n        suffix={\n          <Button\n            size=\"xs\"\n            onClick={() => {\n              Toast.show({\n                icon: <Warning />,\n                content: '自定义内容',\n              });\n            }}\n            style={{ marginLeft: 12 }}\n          >\n            开启\n          </Button>\n        }\n      />\n    </List>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## 更多用法\n\n```jsx\nimport { useRef, useState, useEffect } from 'react';\nimport { Toast, List, Button } from 'zarm';\nimport { Star } from '@zarm-design/icons';\n\nconst Countdown = (props) => {\n  const [count, setCount] = useState(props.count);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCount((value) => {\n        if (value > 1) return value - 1;\n        return value;\n      });\n    }, 1000);\n\n    return () => {\n      window.clearInterval(timer);\n    };\n  }, []);\n\n  return <span>{count} 秒后跳转</span>;\n};\n\nconst Demo = () => {\n  const containerRef = useRef(null);\n\n  return (\n    <List>\n      <List.Item\n        suffix={\n          <Button\n            size=\"xs\"\n            onClick={() => {\n              Toast.show({\n                content: '挂载在指定的 div 元素上',\n                mountContainer: containerRef.current,\n              });\n            }}\n          >\n            开启\n          </Button>\n        }\n      >\n        <div ref={containerRef}>指定挂载节点</div>\n      </List.Item>\n      <List.Item\n        title=\"阻止背景点击\"\n        suffix={\n          <Button\n            size=\"xs\"\n            onClick={() => {\n              Toast.show({\n                content: '不可同时进行其他交互',\n                maskClickable: false,\n              });\n            }}\n          >\n            开启\n          </Button>\n        }\n      />\n      <List.Item\n        title=\"动态内容\"\n        suffix={\n          <Button\n            size=\"xs\"\n            onClick={() => {\n              Toast.show({\n                icon: 'loading',\n                content: <Countdown count={5} />,\n                duration: 5000,\n              });\n            }}\n          >\n            开启\n          </Button>\n        }\n      />\n    </List>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## 销毁\n\n```jsx\nimport { useRef } from 'react';\nimport { Toast, List, Button } from 'zarm';\nimport { Star } from '@zarm-design/icons';\n\nconst Demo = () => {\n  const ref = React.useRef();\n\n  return (\n    <List>\n      <List.Item>\n        <Button\n          size=\"xs\"\n          onClick={() => {\n            ref.current = Toast.show({\n              content: '提示内容不会消失',\n              duration: 0,\n            });\n          }}\n        >\n          开启\n        </Button>\n        <Button\n          size=\"xs\"\n          onClick={() => {\n            ref.current?.close();\n          }}\n          style={{ marginLeft: 12 }}\n        >\n          关闭\n        </Button>\n        <Button\n          size=\"xs\"\n          onClick={() => {\n            Toast.clear();\n          }}\n          style={{ marginLeft: 12 }}\n        >\n          全部清除\n        </Button>\n      </List.Item>\n    </List>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## API\n\n| 属性           | 类型                                                | 默认值              | 说明                               |\n| :------------- | :-------------------------------------------------- | :------------------ | :--------------------------------- |\n| visible        | boolean                                             | false               | 是否展示                           |\n| icon           | 'success' \\| 'fail' \\| 'loading' \\| React.ReactNode | -                   | 显示的图标                         |\n| content        | React.ReactNode                                     | -                   | 显示的内容                         |\n| duration       | number                                              | 2000                | 自动关闭前停留的时间（单位：毫秒） |\n| mask           | boolean                                             | false               | 是否展示遮罩层                     |\n| maskClassName  | string                                              | -                   | 遮罩层样式名                       |\n| maskStyle      | React.CSSProperties                                 | -                   | 遮罩层样式                         |\n| maskColor      | string                                              | -                   | 遮罩层的背景色                     |\n| maskOpacity    | string \\| number                                    | -                   | 遮罩层的透明度                     |\n| maskClickable  | boolean                                             | true                | 是否允许背景点击                   |\n| onMaskClick    | () => void                                          | -                   | 点击遮罩层时触发的回调函数         |\n| onOpen         | () => void                                          | -                   | Toast 显示的回调函数               |\n| onClose        | () => void                                          | -                   | Toast 隐藏的回调函数               |\n| afterOpen      | () => void                                          | -                   | Toast 显示后的回调函数             |\n| afterClose     | () => void                                          | -                   | Toast 隐藏后的回调函数             |\n| mountContainer | MountContainer                                      | () => document.body | 指定 Toast 挂载的 HTML 节点        |\n\n## 指令式 API\n\nToast 仅支持指令式调用\n\n### Toast.show\n\n同时间只允许弹出一个轻提示，新出现的 Toast 会将之前正在显示中的 Toast 销毁。\n\nshow 方法的返回值为一个对象，包含以下属性：\n\n| 属性  | 类型       | 说明             |\n| :---- | :--------- | :--------------- |\n| close | () => void | 关闭当前的 Toast |\n\n### Toast.clear\n\n关闭所有显示中的 Toast。\n\n### Toast.config\n\n设置全局配置，支持配置 `duration`、`mask`、`maskClassName`、`maskStyle`、`maskColor`、`maskOpacity`、`maskClickable` 和 `mountContainer`。配置方法如下：\n\n```tsx\nToast.config({ duration: 3000 maskColor: 'black' });\n```\n"}}]);